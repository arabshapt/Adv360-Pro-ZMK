#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/*                                 ADVANTAGE 360 KEY MATRIX / LAYOUT MAPPING
 ╭────────────────────────────┬────────────────────────────╮
 │  0   1   2   3   4   5   6 │  7   8   9  10  11  12  13 │
 │ 14  15  16  17  18  19  20 │ 21  22  23  24  25  26  27 │
 │ 28  29  30  31  32  33  34 │ 35  36  37  38  39  40  41 │
 │ 42  43  44  45  46  47 ╭───┴───╮ 48  49  50  51  52  53 │
 │ 54  55  56  57  58╭────╯       ╰────╮59  60  61  62  63 │
 ╰───────────────────┼────────┬────────┼───────────────────╯
                 ╭───╯ 64  65 │ 66  67 ╰───╮                
                 │ 68  69  70 │ 71  72  73 │                
                 ╰───────╮ 74 │ 75 ╭───────╯                
                         ╰────┴────╯                         */

//         ADVANTAGE 360 KEY HYPERs / LAYOUT MAPPING
// ╭───────────────────────────────┬───────────────────────────────╮    
// │  1   2   3   4   5   6   7/8  │  9/10  11  12  13  14  15  16 │
// │ 17  18  19  20  21  22  23/24 │ 25/26  27  28  29  30  31  32 │
// │ 33  lc  la  ls  lg  34  35/36 │ 41/42  43  lg  ls  la  lc  44 │
// │ LS  47  48  49  50  51 ╭──────┴──╮     52  53  54  55  56  RS │
// │ SB  XX  XX  XX  XX╭────╯         ╰───╮     XX  XX  65  66  SB │
// ╰───────────────────┼─────────┬────────┼────────────────────────╯
//                 ╭───╯ 37   38 │ 39   40╰───╮                   
//                 │          66 │ 69         │                   
//                 │ 57 58 59 │ 61 63 64│                   
//                 ╰─────────────┴────────────╯       

//         ADVANTAGE 360 KEY HYPERs for taps
// ╭───────────────────────────────┬───────────────────────────────╮    
// │  x   x   x   x   x   x  79/80(5/6)  │  81/82(7/8)  11  12  13  14  15  16 │
// │ 17  18  19  20  21  22  83/84(9/0) │ 85/86(+/-)  27  28  29  30  31  32 │
// │ 33  lc  la  ls  lg  34  87/88(star/slash) │ 89/90(home/end)  43  lg  ls  la  lc  44 │
// │ LS  47  48  49  50  51 ╭──────┴──╮     52  53  54  55  56  RS │
// │ SB  XX  XX  XX  XX╭────╯         ╰───╮     XX  XX  65  66  SB │
// ╰───────────────────┼─────────┬────────┼────────────────────────╯
//                 ╭───╯ 71(1)  72(2) │ 73(3)   74(4)╰───╮  3 is hyper_03 and (3) is kp_3 key                   
//                 │          127(kp_0) │ 128(kp_0)         │                   
//                 │ 57 58 77(pg_up) │ 78(up) 63 64│                   
//                 ╰─────────────┴────────────╯                    
// SB symbols layer on kinesis 


#define KEYS_L  0   1   2   3   4   5   6  14  15  16  17  18  19  20 28  29  30  31  32  33  34 42  43  44  45  46  47 54  55  56  57  58 // left-hand keys
#define KEYS_R  7   8   9   10  11  12  13 21  22  23  24  25  26  27 35  36  37  38  39  40  41 48  49  50  51  52  53 59  60  61  62  63 // right-hand keys
#define THUMBS 64  65  66  67    68  69  70  71  72  73      74  75                             // thumb keys


// #include <dt-bindings/zmk/dynamic-macros.h>

/* Global settings */

#define QUICK_TAP_MS 175
#define QUICK_TAP_MS_PRIMAL 140
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

//#define AS_PIPE(keycode) &as N1 PLUS 
// #define AS_N1(keycode) &as N1 PLUS
// #define AS_N2(keycode) &as N2 LEFT_BRACKET 
// #define AS_N3(keycode) &as N3 LEFT_BRACE 
// #define AS_N4(keycode) &as N4 LEFT_PARENTHESIS
// #define AS_N5(keycode) &as N5 AMPS 
// #define AS_N6(keycode) &as N6 EQUAL 
// #define AS_N7(keycode) &as N7 RIGHT_PARENTHESIS 
// #define AS_N8(keycode) &as N8 RIGHT_BRACE 
// #define AS_N9(keycode) &as N9 RIGHT_BRACKET 
// #define AS_N0(keycode) &as N0 STAR 
// #define AS_EXL(keycode) &as PRCNT EXCL 

// #define HYP(key) LS(LC(LA(LG(key))))
#define HYPERKEY(key) LS(LC(LA(LG(key)))) // hyper
#define RIGHT_CMD_HYPERKEY(key) LS(LC(LA(RG(key)))) // hyper
#define HYPKEY(key) LS(LG(LA(key))) // hyp
#define MEHKEY(key) LS(LC(LA(key))) // meh
#define CAGKEY(key) LG(LC(LA(key))) // cog
#define GASKEY(key) LS(LG(LA(key))) // cos
#define CSGKEY(key) LS(LC(LG(key))) //  cst

// #define RIGHT_CMD_HYPERKEY(key) LS(LC(LA(RG(key)))) // hyper
// #define HYPKEY(key) LS(LG(LA(key))) // hyp
// #define MEHKEY(key) LS(LC(LA(key))) // meh
// #define CAGKEY(key) LG(LC(LA(key))) // cog
// #define GASKEY(key) LS(LG(LA(key))) // cos
// #define CSGKEY(key) LS(LC(LG(key))) //  cst


#define HYPER_01_KEY(key) LS(LC(LA(LG(key))))   // hyper  LS,LC,LA,LG
#define HYPER_02_KEY(key) RS(RC(RA(RG(key))))   // hyper  RS,RC,RA,RG
#define HYPER_03_KEY(key) RS(RC(RA(LS(key))))  // hyper  RS,RC,RA,LS
#define HYPER_04_KEY(key) RS(RC(RA(LC(key))))  // hyper  RS,RC,RA,LC
#define HYPER_05_KEY(key) RS(RC(RA(LA(key))))   // hyper  RS,RC,RA,LA
#define HYPER_06_KEY(key) RS(RC(RA(LG(key))))   // hyper  RS,RC,RA,LG
#define HYPER_07_KEY(key) RS(RC(RG(LS(key))))  // hyper  RS,RC,RG,LS
#define HYPER_08_KEY(key) RS(RC(RG(LC(key))))  // hyper  RS,RC,RG,LC
#define HYPER_09_KEY(key) RS(RC(RG(LA(key))))   // hyper  RS,RC,RG,LA
#define HYPER_10_KEY(key) RS(RC(RG(LG(key))))   // hyper  RS,RC,RG,LG
#define HYPER_11_KEY(key) RS(RC(LS(LC(key))))  // hyper  RS,RC,LS,LC
#define HYPER_12_KEY(key) RS(RC(LS(LA(key))))   // hyper  RS,RC,LS,LA
#define HYPER_13_KEY(key) RS(RC(LS(LG(key))))   // hyper  RS,RC,LS,LG
#define HYPER_14_KEY(key) RS(RC(LC(LA(key))))   // hyper  RS,RC,LC,LA
#define HYPER_15_KEY(key) RS(RC(LC(LG(key))))   // hyper  RS,RC,LC,LG
#define HYPER_16_KEY(key) RS(RC(LA(LG(key))))   // hyper  RS,RC,LA,LG
#define HYPER_17_KEY(key) RS(RA(RG(LS(key))))  // hyper  RS,RA,RG,LS
#define HYPER_18_KEY(key) RS(RA(RG(LC(key))))  // hyper  RS,RA,RG,LC
#define HYPER_19_KEY(key) RS(RA(RG(LA(key))))   // hyper  RS,RA,RG,LA
#define HYPER_20_KEY(key) RS(RA(RG(LG(key))))   // hyper  RS,RA,RG,LG
#define HYPER_21_KEY(key) RS(RA(LS(LC(key))))  // hyper  RS,RA,LS,LC
#define HYPER_22_KEY(key) RS(RA(LS(LA(key))))   // hyper  RS,RA,LS,LA
#define HYPER_23_KEY(key) RS(RA(LS(LG(key))))   // hyper  RS,RA,LS,LG
#define HYPER_24_KEY(key) RS(RA(LC(LA(key))))   // hyper  RS,RA,LC,LA
#define HYPER_25_KEY(key) RS(RA(LC(LG(key))))   // hyper  RS,RA,LC,LG
#define HYPER_26_KEY(key) RS(RA(LA(LG(key))))   // hyper  RS,RA,LA,LG
#define HYPER_27_KEY(key) RS(RG(LS(LC(key))))  // hyper  RS,RG,LS,LC
#define HYPER_28_KEY(key) RS(RG(LS(LA(key))))   // hyper  RS,RG,LS,LA
#define HYPER_29_KEY(key) RS(RG(LS(LG(key))))   // hyper  RS,RG,LS,LG
#define HYPER_30_KEY(key) RS(RG(LC(LA(key))))   // hyper  RS,RG,LC,LA
#define HYPER_31_KEY(key) RS(RG(LC(LG(key))))   // hyper  RS,RG,LC,LG
#define HYPER_32_KEY(key) RS(RG(LA(LG(key))))   // hyper  RS,RG,LA,LG
#define HYPER_33_KEY(key) RS(LS(LC(LA(key))))   // hyper  RS,LS,LC,LA
#define HYPER_34_KEY(key) RS(LS(LC(LG(key))))   // hyper  RS,LS,LC,LG
#define HYPER_35_KEY(key) RS(LS(LA(LG(key))))   // hyper  RS,LS,LA,LG
#define HYPER_36_KEY(key) RS(LC(LA(LG(key))))   // hyper  RS,LC,LA,LG
#define HYPER_37_KEY(key) RC(RA(RG(LS(key))))  // hyper  RC,RA,RG,LS
#define HYPER_38_KEY(key) RC(RA(RG(LC(key))))  // hyper  RC,RA,RG,LC
#define HYPER_39_KEY(key) RC(RA(RG(LA(key))))   // hyper  RC,RA,RG,LA
#define HYPER_40_KEY(key) RC(RA(RG(LG(key))))   // hyper  RC,RA,RG,LG
#define HYPER_41_KEY(key) RC(RA(LS(LC(key))))  // hyper  RC,RA,LS,LC
#define HYPER_42_KEY(key) RC(RA(LS(LA(key))))   // hyper  RC,RA,LS,LA
#define HYPER_43_KEY(key) RC(RA(LS(LG(key))))   // hyper  RC,RA,LS,LG
#define HYPER_44_KEY(key) RC(RA(LC(LA(key))))   // hyper  RC,RA,LC,LA
#define HYPER_45_KEY(key) RC(RA(LC(LG(key))))   // hyper  RC,RA,LC,LG
#define HYPER_46_KEY(key) RC(RA(LA(LG(key))))   // hyper  RC,RA,LA,LG
#define HYPER_47_KEY(key) RC(RG(LS(LC(key))))  // hyper  RC,RG,LS,LC
#define HYPER_48_KEY(key) RC(RG(LS(LA(key))))   // hyper  RC,RG,LS,LA
#define HYPER_49_KEY(key) RC(RG(LS(LG(key))))   // hyper  RC,RG,LS,LG
#define HYPER_50_KEY(key) RC(RG(LC(LA(key))))   // hyper  RC,RG,LC,LA
#define HYPER_51_KEY(key) RC(RG(LC(LG(key))))   // hyper  RC,RG,LC,LG
#define HYPER_52_KEY(key) RC(RG(LA(LG(key))))   // hyper  RC,RG,LA,LG
#define HYPER_53_KEY(key) RC(LS(LC(LA(key))))   // hyper  RC,LS,LC,LA
#define HYPER_54_KEY(key) RC(LS(LC(LG(key))))   // hyper  RC,LS,LC,LG
#define HYPER_55_KEY(key) RC(LS(LA(LG(key))))   // hyper  RC,LS,LA,LG
#define HYPER_56_KEY(key) RC(LC(LA(LG(key))))   // hyper  RC,LC,LA,LG
#define HYPER_57_KEY(key) RA(RG(LS(LC(key))))  // hyper  RA,RG,LS,LC
#define HYPER_58_KEY(key) RA(RG(LS(LA(key))))   // hyper  RA,RG,LS,LA
#define HYPER_59_KEY(key) RA(RG(LS(LG(key))))   // hyper  RA,RG,LS,LG
#define HYPER_60_KEY(key) RA(RG(LC(LA(key))))   // hyper  RA,RG,LC,LA
#define HYPER_61_KEY(key) RA(RG(LC(LG(key))))   // hyper  RA,RG,LC,LG
#define HYPER_62_KEY(key) RA(RG(LA(LG(key))))   // hyper  RA,RG,LA,LG
#define HYPER_63_KEY(key) RA(LS(LC(LA(key))))   // hyper  RA,LS,LC,LA
#define HYPER_64_KEY(key) RA(LS(LC(LG(key))))   // hyper  RA,LS,LC,LG
#define HYPER_65_KEY(key) RA(LS(LA(LG(key))))   // hyper  RA,LS,LA,LG
#define HYPER_66_KEY(key) RA(LC(LA(LG(key))))   // hyper  RA,LC,LA,LG
#define HYPER_67_KEY(key) RG(LS(LC(LA(key))))   // hyper  RG,LS,LC,LA
#define HYPER_68_KEY(key) RG(LS(LC(LG(key))))   // hyper  RG,LS,LC,LG
#define HYPER_69_KEY(key) RG(LS(LA(LG(key))))   // hyper  RG,LS,LA,LG
#define HYPER_70_KEY(key) RG(LC(LA(LG(key))))   // hyper  RG,LC,LA,LG

#define HYPER_71_KEY(key)  RC(RA(RG(RS(LA(key)))))   // hyper  // RC RA RG RS LA
#define HYPER_72_KEY(key)  RC(RA(RG(RS(LS(key)))))   // hyper  // RC RA RG RS LS
#define HYPER_73_KEY(key)  RC(RA(RG(RS(LG(key)))))   // hyper  // RC RA RG RS LG
#define HYPER_74_KEY(key)  RC(RA(RG(RS(LC(key)))))   // hyper  // RC RA RG RS LC
#define HYPER_75_KEY(key)  RC(RA(RG(LA(LS(key)))))   // hyper  // RC RA RG LA LS
#define HYPER_76_KEY(key)  RC(RA(RG(LA(LG(key)))))   // hyper  // RC RA RG LA LG
#define HYPER_77_KEY(key)  RC(RA(RG(LA(LC(key)))))   // hyper  // RC RA RG LA LC
#define HYPER_78_KEY(key)  RC(RA(RG(LS(LG(key)))))   // hyper  // RC RA RG LS LG
#define HYPER_79_KEY(key)  RC(RA(RG(LS(LC(key)))))   // hyper  // RC RA RG LS LC
#define HYPER_80_KEY(key)  RC(RA(RG(LG(LC(key)))))   // hyper  // RC RA RG LG LC
#define HYPER_81_KEY(key)  RC(RA(RS(LA(LS(key)))))   // hyper  // RC RA RS LA LS
#define HYPER_82_KEY(key)  RC(RA(RS(LA(LG(key)))))   // hyper  // RC RA RS LA LG
#define HYPER_83_KEY(key)  RC(RA(RS(LA(LC(key)))))   // hyper  // RC RA RS LA LC
#define HYPER_84_KEY(key)  RC(RA(RS(LS(LG(key)))))   // hyper  // RC RA RS LS LG
#define HYPER_85_KEY(key)  RC(RA(RS(LS(LC(key)))))   // hyper  // RC RA RS LS LC
#define HYPER_86_KEY(key)  RC(RA(RS(LG(LC(key)))))   // hyper  // RC RA RS LG LC
#define HYPER_87_KEY(key)  RC(RA(LA(LS(LG(key)))))   // hyper  // RC RA LA LS LG
#define HYPER_88_KEY(key)  RC(RA(LA(LS(LC(key)))))   // hyper  // RC RA LA LS LC
#define HYPER_89_KEY(key)  RC(RA(LA(LG(LC(key)))))   // hyper  // RC RA LA LG LC
#define HYPER_90_KEY(key)  RC(RA(LS(LG(LC(key)))))   // hyper  // RC RA LS LG LC
// unused hyper keys
#define HYPER_91_KEY(key)  RC(RG(RS(LA(LS(key)))))   // hyper  // RC RG RS LA LS
#define HYPER_92_KEY(key)  RC(RG(RS(LA(LG(key)))))   // hyper  // RC RG RS LA LG
#define HYPER_93_KEY(key)  RC(RG(RS(LA(LC(key)))))   // hyper  // RC RG RS LA LC
#define HYPER_94_KEY(key)  RC(RG(RS(LS(LG(key)))))   // hyper  // RC RG RS LS LG

// used for right red leader
#define HYPER_95_KEY(key)  RC(RG(RS(LS(LC(key)))))   // hyper  // RC RG RS LS LC
#define HYPER_96_KEY(key)  RC(RG(RS(LG(LC(key)))))   // hyper  // RC RG RS LG LC
#define HYPER_97_KEY(key)  RC(RG(LA(LS(LG(key)))))   // hyper  // RC RG LA LS LG
#define HYPER_98_KEY(key)  RC(RG(LA(LS(LC(key)))))   // hyper  // RC RG LA LS LC
#define HYPER_99_KEY(key)  RC(RG(LA(LG(LC(key)))))   // hyper  // RC RG LA LG LC
#define HYPER_100_KEY(key)  RC(RG(LS(LG(LC(key)))))   // hyper  // RC RG LS LG LC
#define HYPER_101_KEY(key)  RC(RS(LA(LS(LG(key)))))   // hyper  // RC RS LA LS LG
#define HYPER_102_KEY(key)  RC(RS(LA(LS(LC(key)))))   // hyper  // RC RS LA LS LC
#define HYPER_103_KEY(key)  RC(RS(LA(LG(LC(key)))))   // hyper  // RC RS LA LG LC
#define HYPER_104_KEY(key)  RC(RS(LS(LG(LC(key)))))   // hyper  // RC RS LS LG LC
#define HYPER_105_KEY(key)  RC(LA(LS(LG(LC(key)))))   // hyper  // RC LA LS LG LC
#define HYPER_106_KEY(key)  RA(RG(RS(LA(LS(key)))))   // hyper  // RA RG RS LA LS
#define HYPER_107_KEY(key)  RA(RG(RS(LA(LG(key)))))   // hyper  // RA RG RS LA LG
#define HYPER_108_KEY(key)  RA(RG(RS(LA(LC(key)))))   // hyper  // RA RG RS LA LC
#define HYPER_109_KEY(key)  RA(RG(RS(LS(LG(key)))))   // hyper  // RA RG RS LS LG
#define HYPER_110_KEY(key)  RA(RG(RS(LS(LC(key)))))   // hyper  // RA RG RS LS LC
#define HYPER_111_KEY(key)  RA(RG(RS(LG(LC(key)))))   // hyper  // RA RG RS LG LC
#define HYPER_112_KEY(key)  RA(RG(LA(LS(LG(key)))))   // hyper  // RA RG LA LS LG
#define HYPER_113_KEY(key)  RA(RG(LA(LS(LC(key)))))   // hyper  // RA RG LA LS LC
#define HYPER_114_KEY(key)  RA(RG(LA(LG(LC(key)))))   // hyper  // RA RG LA LG LC
#define HYPER_115_KEY(key)  RA(RG(LS(LG(LC(key)))))   // hyper  // RA RG LS LG LC
#define HYPER_116_KEY(key)  RA(RS(LA(LS(LG(key)))))   // hyper  // RA RS LA LS LG
#define HYPER_117_KEY(key)  RA(RS(LA(LS(LC(key)))))   // hyper  // RA RS LA LS LC
#define HYPER_118_KEY(key)  RA(RS(LA(LG(LC(key)))))   // hyper  // RA RS LA LG LC
#define HYPER_119_KEY(key)  RA(RS(LS(LG(LC(key)))))   // hyper  // RA RS LS LG LC
#define HYPER_120_KEY(key)  RA(LA(LS(LG(LC(key)))))   // hyper  // RA LA LS LG LC
#define HYPER_121_KEY(key)  RG(RS(LA(LS(LG(key)))))   // hyper  // RG RS LA LS LG
#define HYPER_122_KEY(key)  RG(RS(LA(LS(LC(key)))))   // hyper  // RG RS LA LS LC
#define HYPER_123_KEY(key)  RG(RS(LA(LG(LC(key)))))   // hyper  // RG RS LA LG LC
#define HYPER_124_KEY(key)  RG(RS(LS(LG(LC(key)))))   // hyper  // RG RS LS LG LC

// keys for one time activation(not holding)
#define HYPER_125_KEY(key)  RG(LA(LS(LG(LC(key)))))   // hyper  // RG LA LS LG LC
#define HYPER_126_KEY(key)  RS(LA(LS(LG(LC(key)))))   // hyper  // RS LA LS LG LC
#define HYPER_127_KEY(key)  RC(RA(RG(RS(LA(LS(key))))))   // hyper  // RC RA RG RS LA LS
#define HYPER_128_KEY(key)  RC(RA(RG(RS(LA(LG(key))))))   // hyper  // RC RA RG RS LA LG
#define HYPER_129_KEY(key)  RC(RA(RG(RS(LA(LC(key))))))   // hyper  // RC RA RG RS LA LC
#define HYPER_130_KEY(key)  RC(RA(RG(RS(LS(LG(key))))))   // hyper  // RC RA RG RS LS LG
#define HYPER_131_KEY(key)  RC(RA(RG(RS(LS(LC(key))))))   // hyper  // RC RA RG RS LS LC
#define HYPER_132_KEY(key)  RC(RA(RG(RS(LG(LC(key))))))   // hyper  // RC RA RG RS LG LC
#define HYPER_133_KEY(key)  RC(RA(RG(LA(LS(LG(key))))))   // hyper  // RC RA RG LA LS LG
#define HYPER_134_KEY(key)  RC(RA(RG(LA(LS(LC(key))))))   // hyper  // RC RA RG LA LS LC
#define HYPER_135_KEY(key)  RC(RA(RG(LA(LG(LC(key))))))   // hyper  // RC RA RG LA LG LC
#define HYPER_136_KEY(key)  RC(RA(RG(LS(LG(LC(key))))))   // hyper  // RC RA RG LS LG LC
#define HYPER_137_KEY(key)  RC(RA(RS(LA(LS(LG(key))))))   // hyper  // RC RA RS LA LS LG
#define HYPER_138_KEY(key)  RC(RA(RS(LA(LS(LC(key))))))   // hyper  // RC RA RS LA LS LC
#define HYPER_139_KEY(key)  RC(RA(RS(LA(LG(LC(key))))))   // hyper  // RC RA RS LA LG LC
#define HYPER_140_KEY(key)  RC(RA(RS(LS(LG(LC(key))))))   // hyper  // RC RA RS LS LG LC
#define HYPER_141_KEY(key)  RC(RA(LA(LS(LG(LC(key))))))   // hyper  // RC RA LA LS LG LC
#define HYPER_142_KEY(key)  RC(RG(RS(LA(LS(LG(key))))))   // hyper  // RC RG RS LA LS LG
#define HYPER_143_KEY(key)  RC(RG(RS(LA(LS(LC(key))))))   // hyper  // RC RG RS LA LS LC
#define HYPER_144_KEY(key)  RC(RG(RS(LA(LG(LC(key))))))   // hyper  // RC RG RS LA LG LC
#define HYPER_145_KEY(key)  RC(RG(RS(LS(LG(LC(key))))))   // hyper  // RC RG RS LS LG LC
#define HYPER_146_KEY(key)  RC(RG(LA(LS(LG(LC(key))))))   // hyper  // RC RG LA LS LG LC
#define HYPER_147_KEY(key)  RC(RS(LA(LS(LG(LC(key))))))   // hyper  // RC RS LA LS LG LC
#define HYPER_148_KEY(key)  RA(RG(RS(LA(LS(LG(key))))))   // hyper  // RA RG RS LA LS LG
#define HYPER_149_KEY(key)  RA(RG(RS(LA(LS(LC(key))))))   // hyper  // RA RG RS LA LS LC
#define HYPER_150_KEY(key)  RA(RG(RS(LA(LG(LC(key))))))   // hyper  // RA RG RS LA LG LC
#define HYPER_151_KEY(key)  RA(RG(RS(LS(LG(LC(key))))))   // hyper  // RA RG RS LS LG LC
#define HYPER_152_KEY(key)  RA(RG(LA(LS(LG(LC(key))))))   // hyper  // RA RG LA LS LG LC
#define HYPER_153_KEY(key)  RA(RS(LA(LS(LG(LC(key))))))   // hyper  // RA RS LA LS LG LC
#define HYPER_154_KEY(key)  RG(RS(LA(LS(LG(LC(key))))))   // hyper  // RG RS LA LS LG LC

#define HYPER_01 LS(LC(LA(LGUI)))   // hyper  LS,LC,LA,LG
#define HYPER_02 RS(RC(RA(RGUI)))   // hyper  RS,RC,RA,RG
#define HYPER_03 RS(RC(RA(LSHFT)))  // hyper  RS,RC,RA,LS
#define HYPER_04 RS(RC(RA(LCTRL)))  // hyper  RS,RC,RA,LC
#define HYPER_05 RS(RC(RA(LALT)))   // hyper  RS,RC,RA,LA
#define HYPER_06 RS(RC(RA(LGUI)))   // hyper  RS,RC,RA,LG
#define HYPER_07 RS(RC(RG(LSHFT)))  // hyper  RS,RC,RG,LS
#define HYPER_08 RS(RC(RG(LCTRL)))  // hyper  RS,RC,RG,LC
#define HYPER_09 RS(RC(RG(LALT)))   // hyper  RS,RC,RG,LA
#define HYPER_10 RS(RC(RG(LGUI)))   // hyper  RS,RC,RG,LG
#define HYPER_11 RS(RC(LS(LCTRL)))  // hyper  RS,RC,LS,LC
#define HYPER_12 RS(RC(LS(LALT)))   // hyper  RS,RC,LS,LA
#define HYPER_13 RS(RC(LS(LGUI)))   // hyper  RS,RC,LS,LG
#define HYPER_14 RS(RC(LC(LALT)))   // hyper  RS,RC,LC,LA
#define HYPER_15 RS(RC(LC(LGUI)))   // hyper  RS,RC,LC,LG
#define HYPER_16 RS(RC(LA(LGUI)))   // hyper  RS,RC,LA,LG
#define HYPER_17 RS(RA(RG(LSHFT)))  // hyper  RS,RA,RG,LS
#define HYPER_18 RS(RA(RG(LCTRL)))  // hyper  RS,RA,RG,LC
#define HYPER_19 RS(RA(RG(LALT)))   // hyper  RS,RA,RG,LA
#define HYPER_20 RS(RA(RG(LGUI)))   // hyper  RS,RA,RG,LG
#define HYPER_21 RS(RA(LS(LCTRL)))  // hyper  RS,RA,LS,LC
#define HYPER_22 RS(RA(LS(LALT)))   // hyper  RS,RA,LS,LA
#define HYPER_23 RS(RA(LS(LGUI)))   // hyper  RS,RA,LS,LG
#define HYPER_24 RS(RA(LC(LALT)))   // hyper  RS,RA,LC,LA
#define HYPER_25 RS(RA(LC(LGUI)))   // hyper  RS,RA,LC,LG
#define HYPER_26 RS(RA(LA(LGUI)))   // hyper  RS,RA,LA,LG
#define HYPER_27 RS(RG(LS(LCTRL)))  // hyper  RS,RG,LS,LC
#define HYPER_28 RS(RG(LS(LALT)))   // hyper  RS,RG,LS,LA
#define HYPER_29 RS(RG(LS(LGUI)))   // hyper  RS,RG,LS,LG
#define HYPER_30 RS(RG(LC(LALT)))   // hyper  RS,RG,LC,LA
#define HYPER_31 RS(RG(LC(LGUI)))   // hyper  RS,RG,LC,LG
#define HYPER_32 RS(RG(LA(LGUI)))   // hyper  RS,RG,LA,LG
#define HYPER_33 RS(LS(LC(LALT)))   // hyper  RS,LS,LC,LA
#define HYPER_34 RS(LS(LC(LGUI)))   // hyper  RS,LS,LC,LG
#define HYPER_35 RS(LS(LA(LGUI)))   // hyper  RS,LS,LA,LG
#define HYPER_36 RS(LC(LA(LGUI)))   // hyper  RS,LC,LA,LG
#define HYPER_37 RC(RA(RG(LSHFT)))  // hyper  RC,RA,RG,LS
#define HYPER_38 RC(RA(RG(LCTRL)))  // hyper  RC,RA,RG,LC
#define HYPER_39 RC(RA(RG(LALT)))   // hyper  RC,RA,RG,LA
#define HYPER_40 RC(RA(RG(LGUI)))   // hyper  RC,RA,RG,LG
#define HYPER_41 RC(RA(LS(LCTRL)))  // hyper  RC,RA,LS,LC
#define HYPER_42 RC(RA(LS(LALT)))   // hyper  RC,RA,LS,LA
#define HYPER_43 RC(RA(LS(LGUI)))   // hyper  RC,RA,LS,LG
#define HYPER_44 RC(RA(LC(LALT)))   // hyper  RC,RA,LC,LA
#define HYPER_45 RC(RA(LC(LGUI)))   // hyper  RC,RA,LC,LG
#define HYPER_46 RC(RA(LA(LGUI)))   // hyper  RC,RA,LA,LG
#define HYPER_47 RC(RG(LS(LCTRL)))  // hyper  RC,RG,LS,LC
#define HYPER_48 RC(RG(LS(LALT)))   // hyper  RC,RG,LS,LA
#define HYPER_49 RC(RG(LS(LGUI)))   // hyper  RC,RG,LS,LG
#define HYPER_50 RC(RG(LC(LALT)))   // hyper  RC,RG,LC,LA
#define HYPER_51 RC(RG(LC(LGUI)))   // hyper  RC,RG,LC,LG
#define HYPER_52 RC(RG(LA(LGUI)))   // hyper  RC,RG,LA,LG
#define HYPER_53 RC(LS(LC(LALT)))   // hyper  RC,LS,LC,LA
#define HYPER_54 RC(LS(LC(LGUI)))   // hyper  RC,LS,LC,LG
#define HYPER_55 RC(LS(LA(LGUI)))   // hyper  RC,LS,LA,LG
#define HYPER_56 RC(LC(LA(LGUI)))   // hyper  RC,LC,LA,LG
#define HYPER_57 RA(RG(LS(LCTRL)))  // hyper  RA,RG,LS,LC
#define HYPER_58 RA(RG(LS(LALT)))   // hyper  RA,RG,LS,LA
#define HYPER_59 RA(RG(LS(LGUI)))   // hyper  RA,RG,LS,LG
#define HYPER_60 RA(RG(LC(LALT)))   // hyper  RA,RG,LC,LA
#define HYPER_61 RA(RG(LC(LGUI)))   // hyper  RA,RG,LC,LG
#define HYPER_62 RA(RG(LA(LGUI)))   // hyper  RA,RG,LA,LG
#define HYPER_63 RA(LS(LC(LALT)))   // hyper  RA,LS,LC,LA
#define HYPER_64 RA(LS(LC(LGUI)))   // hyper  RA,LS,LC,LG
#define HYPER_65 RA(LS(LA(LGUI)))   // hyper  RA,LS,LA,LG
#define HYPER_66 RA(LC(LA(LGUI)))   // hyper  RA,LC,LA,LG
#define HYPER_67 RG(LS(LC(LALT)))   // hyper  RG,LS,LC,LA
#define HYPER_68 RG(LS(LC(LGUI)))   // hyper  RG,LS,LC,LG
#define HYPER_69 RG(LS(LA(LGUI)))   // hyper  RG,LS,LA,LG
#define HYPER_70 RG(LC(LA(LGUI)))   // hyper  RG,LC,LA,LG


// keys for sticky modifiers(not holding) left red key
#define HYPER_LEFT_RED_126_SEMI(key) RS(LA(LS(LG(LCTRL))))   // hyper  // RS LA LS LG LC
#define HYPER_LEFT_RED_127_COMMA(key) RC(RA(RG(RS(LA(LSHFT)))))   // hyper  // RC RA RG RS LA LS
#define HYPER_LEFT_RED_128_DOT(key) RC(RA(RG(RS(LA(LGUI)))))   // hyper  // RC RA RG RS LA LG
#define HYPER_LEFT_RED_129_P(key) RC(RA(RG(RS(LA(LCTRL)))))   // hyper  // RC RA RG RS LA LC
#define HYPER_LEFT_RED_130_Y(key) RC(RA(RG(RS(LS(LGUI)))))   // hyper  // RC RA RG RS LS LG
#define HYPER_LEFT_RED_131_F(key) RC(RA(RG(RS(LS(LCTRL)))))   // hyper  // RC RA RG RS LS LC
#define HYPER_LEFT_RED_132_G(key) RC(RA(RG(RS(LG(LCTRL)))))   // hyper  // RC RA RG RS LG LC
#define HYPER_LEFT_RED_133_R(key) RC(RA(RG(LA(LS(LGUI)))))   // hyper  // RC RA RG LA LS LG
#define HYPER_LEFT_RED_134_C(key) RC(RA(RG(LA(LS(LCTRL)))))   // hyper  // RC RA RG LA LS LC
#define HYPER_LEFT_RED_135_L(key) RC(RA(RG(LA(LG(LCTRL)))))   // hyper  // RC RA RG LA LG LC
#define HYPER_LEFT_RED_136_A(key) RC(RA(RG(LS(LG(LCTRL)))))   // hyper  // RC RA RG LS LG LC
#define HYPER_LEFT_RED_137_O(key) RC(RA(RS(LA(LS(LGUI)))))   // hyper  // RC RA RS LA LS LG
#define HYPER_LEFT_RED_138_E(key) RC(RA(RS(LA(LS(LCTRL)))))   // hyper  // RC RA RS LA LS LC
#define HYPER_LEFT_RED_139_U(key) RC(RA(RS(LA(LG(LCTRL)))))   // hyper  // RC RA RS LA LG LC
#define HYPER_LEFT_RED_140_I(key) RC(RA(RS(LS(LG(LCTRL)))))   // hyper  // RC RA RS LS LG LC
#define HYPER_LEFT_RED_141_D(key) RC(RA(LA(LS(LG(LCTRL)))))   // hyper  // RC RA LA LS LG LC
#define HYPER_LEFT_RED_142_H(key) RC(RG(RS(LA(LS(LGUI)))))   // hyper  // RC RG RS LA LS LG
#define HYPER_LEFT_RED_143_T(key) RC(RG(RS(LA(LS(LCTRL)))))   // hyper  // RC RG RS LA LS LC
#define HYPER_LEFT_RED_144_N(key) RC(RG(RS(LA(LG(LCTRL)))))   // hyper  // RC RG RS LA LG LC
#define HYPER_LEFT_RED_145_S(key) RC(RG(RS(LS(LG(LCTRL)))))   // hyper  // RC RG RS LS LG LC
#define HYPER_LEFT_RED_146_APOS(key) RC(RG(LA(LS(LG(LCTRL)))))   // hyper  // RC RG LA LS LG LC
#define HYPER_LEFT_RED_147_Q(key) RC(RS(LA(LS(LG(LCTRL)))))   // hyper  // RC RS LA LS LG LC
#define HYPER_LEFT_RED_148_J(key) RA(RG(RS(LA(LS(LGUI)))))   // hyper  // RA RG RS LA LS LG
#define HYPER_LEFT_RED_149_K(key) RA(RG(RS(LA(LS(LCTRL)))))   // hyper  // RA RG RS LA LS LC
#define HYPER_LEFT_RED_150_X(key) RA(RG(RS(LA(LG(LCTRL)))))   // hyper  // RA RG RS LA LG LC
#define HYPER_LEFT_RED_151_B(key) RA(RG(RS(LS(LG(LCTRL)))))   // hyper  // RA RG RS LS LG LC
#define HYPER_LEFT_RED_152_M(key) RA(RG(LA(LS(LG(LCTRL)))))   // hyper  // RA RG LA LS LG LC
#define HYPER_LEFT_RED_153_W(key) RA(RS(LA(LS(LG(LCTRL)))))   // hyper  // RA RS LA LS LG LC
#define HYPER_LEFT_RED_154_V(key) RG(RS(LA(LS(LG(LCTRL)))))   // hyper  // RG RS LA LS LG LC
#define HYPER_LEFT_RED_125_Z(key)  RG(LA(LS(LG(LCTRL))))   // hyper  // RG LA LS LG LC

// keys for sticky modifiers(not holding) right red key
#define HYPER_RIGHT_RED_95_SEMI(key)   RC(RG(RS(LS(LCTRL))))   // hyper  // RC RG RS LS LC
#define HYPER_RIGHT_RED_96_COMMA(key)   RC(RG(RS(LG(LCTRL))))   // hyper  // RC RG RS LG LC
#define HYPER_RIGHT_RED_97_DOT(key)   RC(RG(LA(LS(LGUI))))   // hyper  // RC RG LA LS LG
#define HYPER_RIGHT_RED_98_P(key)   RC(RG(LA(LS(LCTRL))))   // hyper  // RC RG LA LS LC
#define HYPER_RIGHT_RED_99_Y(key)   RC(RG(LA(LG(LCTRL))))   // hyper  // RC RG LA LG LC
#define HYPER_RIGHT_RED_100_F(key)  RC(RG(LS(LG(LCTRL))))   // hyper  // RC RG LS LG LC
#define HYPER_RIGHT_RED_101_G(key)  RC(RS(LA(LS(LGUI))))   // hyper  // RC RS LA LS LG
#define HYPER_RIGHT_RED_102_R(key)  RC(RS(LA(LS(LCTRL))))   // hyper  // RC RS LA LS LC
#define HYPER_RIGHT_RED_103_C(key)  RC(RS(LA(LG(LCTRL))))   // hyper  // RC RS LA LG LC
#define HYPER_RIGHT_RED_104_L(key)  RC(RS(LS(LG(LCTRL))))   // hyper  // RC RS LS LG LC
#define HYPER_RIGHT_RED_105_A(key)  RC(LA(LS(LG(LCTRL))))   // hyper  // RC LA LS LG LC
#define HYPER_RIGHT_RED_106_O(key)  RA(RG(RS(LA(LSHFT))))   // hyper  // RA RG RS LA LS
#define HYPER_RIGHT_RED_107_E(key)  RA(RG(RS(LA(LGUI))))   // hyper  // RA RG RS LA LG
#define HYPER_RIGHT_RED_108_U(key)  RA(RG(RS(LA(LCTRL))))   // hyper  // RA RG RS LA LC
#define HYPER_RIGHT_RED_109_I(key)  RA(RG(RS(LS(LGUI))))   // hyper  // RA RG RS LS LG
#define HYPER_RIGHT_RED_110_D(key)  RA(RG(RS(LS(LCTRL))))   // hyper  // RA RG RS LS LC
#define HYPER_RIGHT_RED_111_H(key)  RA(RG(RS(LG(LCTRL))))   // hyper  // RA RG RS LG LC
#define HYPER_RIGHT_RED_112_T(key)  RA(RG(LA(LS(LGUI))))   // hyper  // RA RG LA LS LG
#define HYPER_RIGHT_RED_113_N(key)  RA(RG(LA(LS(LCTRL))))   // hyper  // RA RG LA LS LC
#define HYPER_RIGHT_RED_114_S(key)  RA(RG(LA(LG(LCTRL))))   // hyper  // RA RG LA LG LC
#define HYPER_RIGHT_RED_115_APOS(key)  RA(RG(LS(LG(LCTRL))))   // hyper  // RA RG LS LG LC
#define HYPER_RIGHT_RED_116_Q(key)  RA(RS(LA(LS(LGUI))))   // hyper  // RA RS LA LS LG
#define HYPER_RIGHT_RED_117_J(key)  RA(RS(LA(LS(LCTRL))))   // hyper  // RA RS LA LS LC
#define HYPER_RIGHT_RED_118_K(key)  RA(RS(LA(LG(LCTRL))))   // hyper  // RA RS LA LG LC
#define HYPER_RIGHT_RED_119_X(key)  RA(RS(LS(LG(LCTRL))))   // hyper  // RA RS LS LG LC
#define HYPER_RIGHT_RED_120_B(key)  RA(LA(LS(LG(LCTRL))))   // hyper  // RA LA LS LG LC
#define HYPER_RIGHT_RED_121_M(key)  RG(RS(LA(LS(LGUI))))   // hyper  // RG RS LA LS LG
#define HYPER_RIGHT_RED_122_W(key)  RG(RS(LA(LS(LCTRL))))   // hyper  // RG RS LA LS LC
#define HYPER_RIGHT_RED_123_V(key)  RG(RS(LA(LG(LCTRL))))   // hyper  // RG RS LA LG LC
#define HYPER_RIGHT_RED_124_Z(key)  RG(RS(LS(LG(LCTRL))))   // hyper  // RG RS LS LG LC

// #define ALL_RIGHT_HYPER_01 RS(RC(RA(RGUI))) // hyper
// #define RIGHT_CMD_HYPER_02 LS(LC(LA(RGUI))) // hyper
// #define RIGHT_CTRL_HYPER_03 LS(LG(LA(RCTRL))) // hyper
// #define RIGHT_ALT_HYPER_04 LS(LG(LC(RALT))) // hyper
// #define RIGHT_SHFT_HYPER_05 LC(LG(LA(RSHFT))) // hyper
// #define RIGHT_CMD_SHFT_HYPER_06 LC(RG(LA(RSHFT))) // hyper
// #define RIGHT_CTRL_SHFT_HYPER_07 RC(LG(LA(RSHFT))) // hyper
// #define RIGHT_ALT_SHFT_HYPER_08 LC(LG(RA(RSHFT))) // hyper
// #define RIGHT_CTRL_ALT_SHFT_HYPER_09 RC(LG(RA(RSHFT))) // hyper
// #define RIGHT_CMD_ALT_SHFT_HYPER_10 LC(RG(RA(RSHFT))) // hyper
#define HYP LS(LA(LGUI)) // hyp
#define MEH LS(LA(LCTL)) // meh
#define CAG LG(LA(LCTL)) // cog
#define GAS LS(LA(LGUI)) // cos
#define CSG LS(LC(LGUI)) //  cst

#define BROWSER_SEARCH LG(F) 
#define BROWSER_NEWTAB LG(T) 
#define BROWSER_CLOSETTAB LG(W) 
#define BROWSER_NEXTTAB LG(LA(RIGHT))
#define BROWSER_PREVTAB LG(LA(LEFT))

#define DEFAULT_QWERTY             0
#define LAYER_KEYPAD               1
#define COLEMAK                    2
#define LAYER_MOD                  3
#define LAYER_GAMING               4
#define PRIME_LAYER                5
#define PRIME_LAYER_NO_MODS        6
#define LAYER_QWERTY_NAV           7
#define SYMBOLS_LAYER              8
#define DELETING_LAYER             9
#define JUMP_WORDS_LAYER           10
#define DELETING_LAYER_ON_RIGHT    11
#define SELECTING_LAYER_ON_RIGHT   12
#define LAYER_FN                   13
// SEMI COMMA DOT P Y F G R L A O E U I D H T N S APOS Q J K X B M W V Z
#define SKQ_LEFT_RED          14
#define SKQ_RIGHT_RED          15
// #define SL_SEMI                15
// #define SL_COMMA               16
// #define SL_DOT                 17
// #define SL_P                   18
// #define SL_Y                   19
// #define SL_F                   20
// #define SL_G                   21
// #define SL_R                   22
// #define SL_C                   22
// #define SL_L                   23
// #define SL_A                   24
// #define SL_O                   25
// #define SL_E                   26
// #define SL_U                   27
// #define SL_I                   28
// #define SL_D                   29
// #define SL_H                   30
// #define SL_T                   31
// #define SL_N                   32
// #define SL_S                   33
// #define SL_APOS                34
// #define SL_Q                   35
// #define SL_J                   36
// #define SL_K                   37
// #define SL_X                   38
// #define SL_B                   39
// #define SL_M                   40
// #define SL_W                   41
// #define SL_V                   42
// #define SL_Z                   43
// #define LEADER(NAME, KEYS, BINDINGS, LAYERS) \
//     leader_##NAME { \
//         key-positions = <KEYS>; \
//         bindings = <BINDINGS>; \
//         layers = <LAYERS>; \
//     };


//   keymap {
//     compatible = "zmk,keymap";

//     default_layer {
//       bindings = <
//         &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                           &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
//         &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                            &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
//         &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL           &none &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
//         &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
//         &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END  &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
//       >;
//     };
//     keypad {
//       bindings = <
//         &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                           &mo 3 &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
//         &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                            &none &kp Y  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp BSLH
//         &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT &kp LGUI  &kp RCTRL           &none &kp H  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &kp SQT
//         &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
//         &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END  &kp PG_DN &kp ENTER &kp KP_N0              &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
//       >;
//     };
//     fn {
//       bindings = <
//         &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog 1                                           &mo 3 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
//         &trans &trans &trans &trans &trans &trans  &none                                           &none &trans &trans &trans &trans  &trans  &trans
//         &trans &trans &trans &trans &trans &trans  &none        &trans &trans &trans &trans        &none &trans &trans &trans &trans  &trans  &trans
//         &trans &trans &trans &trans &trans &trans                      &trans &trans                     &trans &trans &trans &trans  &trans  &trans
//         &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
//       >;
//     };
//     mod {
//       bindings = <
//         &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
//         &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
//         &none &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
//         &none &none        &none        &none        &none        &none                                      &none &none                                                        &none        &none        &none        &none &none &none
//         &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
//       >;
//     };

  &mt {
    tapping-term-ms = <210>;
    flavor = "hold-preferred";//"tap-preferred";
    quick_tap_ms = <210>;
  };

&lt {
    flavor = "hold-preferred";//"balanced"; // tp - testing phase
    tapping-term-ms = <200>; //tp
    quick_tap_ms = <210>;
};
&sl {
    release-after-ms = <1000>;
};
// &leader {
//     timeout-ms = <500>;
//     // timerless;
// };
//   &sk {
//     release-after-ms = <350>;
//     quick-release;
//     /delete-property/ ignore-modifiers;
// };

/ {
    behaviors {
      #include "macros.dtsi"
      // sticky modifiers custom, not affecting the rest of sticky keys(if I had any others)
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };
        skq1: sticky_key_quick_release1 {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE1";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <400>;
        quick-release;
        ignore-modifiers;
      };
    // hm: homerow_mods {
    //     compatible = "zmk,behavior-hold-tap";
    //     label = "HOMEROW_MODS";
    //     #binding-cells = <2>;
    //     tapping-term-ms = <230>;
    //     quick_tap_ms = <250>;
    //     flavor = "tap-preferred";
    //     bindings = <&kp>, <&kp>;
    // };
    modthumbhm: modthumb_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "MOD_THUMB_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <210>;                // repeat on tap-into-hold
        flavor = "hold-preferred";
        global-quick-tap-ms = <50>;    // reduce this     // requires PR #1387
        bindings = <&kp>, <&kp>;
        // hold-trigger-key-positions = < KEYS_L THUMBS>;
        // hold-trigger-on-release;             // delay positional check until key-release
    };
    thumbhm: thumb_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <210>;                // repeat on tap-into-hold
        flavor = "balanced";
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387
        bindings = <&kp>, <&kp>;
        //hold-trigger-key-positions = < KEYS_L THUMBS>;//what is this? thumb keys but only left side?
        //hold-trigger-on-release;             // delay positional check until key-release
    };
     thumbhlayEscape: thumb_homerow_layEscape {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_HOMEROW_LAYEscape";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <210>;                // repeat on tap-into-hold
        flavor = "hold-preferred";
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387
        bindings = <&mo>, <&kp>;
        //hold-trigger-key-positions = < KEYS_L THUMBS>;//what is this? thumb keys but only left side?
        //hold-trigger-on-release;             // delay positional check until key-release
    };
        thumbhlay: thumb_homerow_lay {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_HOMEROW_LAY";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <210>;                // repeat on tap-into-hold
        flavor = "hold-preferred";
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387
        bindings = <&mo>, <&kp>;
        //hold-trigger-key-positions = < KEYS_L THUMBS>;//what is this? thumb keys but only left side?
        //hold-trigger-on-release;             // delay positional check until key-release
    };
       thumbhSlay: thumb_homerow_Slay {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_HOMEROW_SLAY";
        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <210>;                // repeat on tap-into-hold
        flavor = "balanced";
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387
        bindings = <&mo>, <&sl>;
        //hold-trigger-key-positions = < KEYS_L THUMBS>;//what is this? thumb keys but only left side?
        //hold-trigger-on-release;             // delay positional check until key-release
    };
        holdmethumbhlay: holdmethumb_homerow_lay {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLDME_THUMB_HOMEROW_LAY";
        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <210>;                // repeat on tap-into-hold
        flavor = "hold-preferred";
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387
        bindings = <&mo>, <&kp>;
        //hold-trigger-key-positions = < KEYS_L THUMBS>;//what is this? thumb keys but only left side?
        //hold-trigger-on-release;             // delay positional check until key-release
    };
        hml: left_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <210>;
        quick-tap-ms = <210>;                //default: 175 repeat on tap-into-hold
        flavor = "balanced";
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < KEYS_L THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
    };
        hmr: right_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <210>;
        quick-tap-ms = <210>;
        global-quick-tap-ms = <QUICK_TAP_MS>;         // requires PR #1387                // repeat on tap-into-hold
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
    };
    hml_primal: left_homerow_mods_primal {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_HOMEROW_MODS_PRIMAL";
        #binding-cells = <2>;
        tapping-term-ms = <185>;
        quick-tap-ms = <210>;
        global-quick-tap-ms = <QUICK_TAP_MS_PRIMAL>;         // requires PR #1387                // repeat on tap-into-hold
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
    };
    hmr_primal: right_homerow_mods_primal {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_HOMEROW_MODS_PRIMAL";
        #binding-cells = <2>;
        tapping-term-ms = <185>;
        quick-tap-ms = <210>;
        global-quick-tap-ms = <QUICK_TAP_MS_PRIMAL>;         // requires PR #1387                // repeat on tap-into-hold
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;             // delay positional check until key-release
    };

    gprcnt: grave_prcnt {
    compatible = "zmk,behavior-mod-morph";
    label = "grave_pipe";
    #binding-cells = <0>;
    bindings = <&kp GRAVE>, <&kp PRCNT>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
ppipe: pipe_pipe {
    compatible = "zmk,behavior-mod-morph";
    label = "pipe_pipe";
    #binding-cells = <0>;
    bindings = <&kp PIPE>, <&kp PIPE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
pkp_n1: plus_kp_n1 {
    compatible = "zmk,behavior-mod-morph";
    label = "plus_kp_n1";
    #binding-cells = <0>;
    bindings = <&kp PLUS>, <&kp N1>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
lkp_n2: left_bracket_kp_n2 {
    compatible = "zmk,behavior-mod-morph";
    label = "left_bracket_kp_n2";
    #binding-cells = <0>;
    bindings = <&kp LEFT_BRACKET>, <&kp N2>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
lkp_n3: left_brace_kp_n3 {
    compatible = "zmk,behavior-mod-morph";
    label = "left_brace_kp_n3";
    #binding-cells = <0>;
    bindings = <&kp LEFT_BRACE>, <&kp N3>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
lkp_n4: left_parenthesis_kp_n4 {
    compatible = "zmk,behavior-mod-morph";
    label = "left_parenthesis_kp_n4";
    #binding-cells = <0>;
    bindings = <&kp LEFT_PARENTHESIS>, <&kp N4>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
akp_n5: amps_kp_n5 {
    compatible = "zmk,behavior-mod-morph";
    label = "amps_kp_n5";
    #binding-cells = <0>;
    bindings = <&kp AMPS>, <&kp N5>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
ekp_n6: equal_kp_n6 {
    compatible = "zmk,behavior-mod-morph";
    label = "equal_kp_n6";
    #binding-cells = <0>;
    bindings = <&kp EQUAL>, <&kp N6>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
rkp_n7: right_parenthesis_kp_n7 {
    compatible = "zmk,behavior-mod-morph";
    label = "right_parenthesis_kp_n7";
    #binding-cells = <0>;
    bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
rkp_n8: right_brace_kp_n8 {
    compatible = "zmk,behavior-mod-morph";
    label = "right_brace_kp_n8";
    #binding-cells = <0>;
    bindings = <&kp RIGHT_BRACE>, <&kp N8>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
rkp_n9: right_bracket_kp_n9 {
    compatible = "zmk,behavior-mod-morph";
    label = "right_bracket_kp_n9";
    #binding-cells = <0>;
    bindings = <&kp RIGHT_BRACKET>, <&kp N9>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
skp_n0: star_kp_n0 {
    compatible = "zmk,behavior-mod-morph";
    label = "star_kp_n0";
    #binding-cells = <0>;
    bindings = <&kp STAR>, <&kp N0>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};

n1_pkp: plus_n1_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "plus_n1_kp";
    #binding-cells = <0>;
    bindings = <&kp N1>, <&kp PLUS>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n2_lkp: left_bracket_n2_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "left_bracket_n2_kp";
    #binding-cells = <0>;
    bindings = <&kp N2>, <&kp LEFT_BRACKET>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n3_lkp: left_brace_n3_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "left_brace_n3_kp";
    #binding-cells = <0>;
    bindings = <&kp N3>, <&kp LEFT_BRACE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n4_lkp: left_parenthesis_n4_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "left_parenthesis_n4_kp";
    #binding-cells = <0>;
    bindings = <&kp N4>, <&kp LEFT_PARENTHESIS>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n5_akp: amps_n5_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "amps_n5_kp";
    #binding-cells = <0>;
    bindings = <&kp N5>, <&kp AMPS>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n6_ekp: equal_n6_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "equal_n6_kp";
    #binding-cells = <0>;
    bindings = <&kp N6>, <&kp EQUAL>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n7_rkp: right_parenthesis_n7_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "right_parenthesis_n7_kp";
    #binding-cells = <0>;
    bindings = <&kp N7>, <&kp RIGHT_PARENTHESIS>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n8_rkp: right_brace_n8_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "right_brace_n8_kp";
    #binding-cells = <0>;
    bindings = <&kp N8>, <&kp RIGHT_BRACE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n9_rkp: right_bracket_n9_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "right_bracket_n9_kp";
    #binding-cells = <0>;
    bindings = <&kp N9>, <&kp RIGHT_BRACKET>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
n0_skp: star_n0_kp {
    compatible = "zmk,behavior-mod-morph";
    label = "star_n0_kp";
    #binding-cells = <0>;
    bindings = <&kp N0>, <&kp STAR>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
eprcnt: excl_prcnt {
    compatible = "zmk,behavior-mod-morph";
    label = "excl_prcnt";
    #binding-cells = <0>;
    bindings = <&kp EXCL>, <&kp PRCNT>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};

dtilde: dllr_tilde {
    compatible = "zmk,behavior-mod-morph";
    label = "dllr_grave";
    #binding-cells = <0>;
    bindings = <&kp DLLR>, <&kp TILDE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
ggrave: grave_grave {
    compatible = "zmk,behavior-mod-morph";
    label = "grave_grave";
    #binding-cells = <0>;
    bindings = <&kp GRAVE>, <&kp GRAVE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
bhash: bslh_hash {
    compatible = "zmk,behavior-mod-morph";
    label = "bslh_hash";
    #binding-cells = <0>;
    bindings = <&kp BSLH>, <&kp HASH>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
acaret: at_caret {
    compatible = "zmk,behavior-mod-morph";
    label = "at_caret";
    #binding-cells = <0>;
    bindings = <&kp AT>, <&kp CARET>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&skq1 RC(RA(RS(LA(LS(LGUI))))) >, < &caps_word >/*, <&kp HYPER_67>*/;
        };
                as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht_bhash: ht_bhash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BHASH";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&bhash>;
        };
        custom_shift: custom_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <175>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&td_mt>;
        };
        custom_repeat: custom_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_REPEAT";
            #binding-cells = <2>;
            tapping_term_ms = <210>;
            flavor = "balanced";
            bindings = <&kp>, <&td_mt_kp_25_26>;
        };
        //
        td_mt_kp_07_08: tap_dance_kp_07_08 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_KP_07_08";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&mt HYPER_07 HYPER_79_KEY(KP_N5)>, <&mt HYPER_08 HYPER_80_KEY(KP_N6)>, <&to LAYER_MOD>;
        };
        td_mt_kp_09_10: tap_dance_kp_09_10 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_KP_09_10";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&mt HYPER_09 HYPER_81_KEY(KP_N7)>, <&mt HYPER_10 HYPER_82_KEY(KP_N8)>, <&to LAYER_MOD>;
        }; 
        td_mt_kp_23_24: tap_dance_kp_23_24 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_KP_23_24";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt HYPER_23 HYPER_83_KEY(KP_N9)>, <&mt HYPER_24 HYPER_84_KEY(KP_N0)>;
        }; 
        td_mt_kp_25_26: tap_dance_kp_25_26 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_KP_25_26";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&key_repeat/*HYPER_85_KEY(KP_PLUS)*/>/*, <&mt HYPER_26&kp HYPER_86_KEY(KP_MINUS)>*/;
        }; 
        td_mt_kp_35_36: tap_dance_kp_35_36 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_KP_35_36";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt HYPER_35 HYPER_87_KEY(KP_ASTERISK)>, <&mt HYPER_36 HYPER_88_KEY(KP_SLASH)>;
        }; 
        td_mt_kp_41_42: tap_dance_kp_41_42 {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_KP_41_42";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt HYPER_41 HYPER_89_KEY(HOME)>, <&mt HYPER_42 HYPER_90_KEY(END)>;
        }; 
        // td_mt_kp_59_60: tap_dance_kp_59_60 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "tap_dance_KP_59_60";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&mt HYPER_59 HYPER_17_KEY(PG_UP)>, <&mt HYPER_60 HYPER_18_KEY(PG_DN)>;
        // }; 
        // td_mt_kp_61_62: tap_dance_kp_61_62 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "tap_dance_KP_61_62";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&mt HYPER_61 HYPER_28_KEY(LESS_THAN)>, <&mt HYPER_62 HYPER_29_KEY(GREATER_THAN)>;
        // }; 
        // td_mt_kp_66_68: tap_dance_kp_66_68 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "tap_dance_KP_66_68";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&mt HYPER_66 HYPER_21_KEY(COLON)>, <&mt HYPER_68 HYPER_22_KEY(DOUBLE_QUOTES)>;
        // }; 
        // td_mt_kp_69_70: tap_dance_kp_69_70 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "tap_dance_KP_69_70";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&mt HYPER_69 HYPER_23_KEY(LEFT_BRACE)>, <&mt HYPER_70 HYPER_27_KEY(RIGHT_BRACE)>;
        // }; 
        // td_mt_kp_789: tap_dance_kp_789 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "TAP_DANCE_KP_789";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <350>;
        //     bindings = <&kp HYPER_01_KEY(KP_N1)>, <&mt HYPER_02 HYPER_02_KEY(KP_N2)>, <&kp HYPER_03_KEY(KP_N3)>;
        // };
        // td_kp_789: custom_mt_kp_789 {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "CUSTOM_MT_KP_789";
        //     #binding-cells = <2>;
        //     tapping_term_ms = <200>;
        //     flavor = "hold-preferred";
        //     bindings = <&kp>, <&td_mt_kp_789>;
        // };

        // custom shift is used like this: "&custom_shift RSHFT 0"
    //     leaders: leaders {
    // compatible = "zmk,behavior-tap-dance";
    // label = "leaders";
    // #binding-cells = <0>;
    // tapping-term-ms = <200>;
    // bindings = <&leader>;
// };
// leader_sequences {
//     compatible = "zmk,leader-sequences";
//     LEADER(switchmode,  , &kp LC(LS(A)) , 5)
// };
    
  };


//     macros {
//         //        win_shift_grave: win_shift_grave {
//         //            label = "win_shift_grave";
//         //            compatible = "zmk,behavior-macro";
//         //            #binding-cells = <0>;
//         //	    wait-ms = <40>;
//         //	    tap-ms = <40>;
//         //            bindings
//         //                = <&macro_press &kp LGUI &kp LSHFT>
//         //                , <&macro_tap &kp GRAVE>
//         //                , <&macro_release &kp LGUI &kp LSHFT>
//         //                ;
//         //        };
//         	//   dm1: dm1 {
//             //           compatible = "zmk,behavior-dynamic-macro";
//             //           label = "dynamic-macro-1";
//             //                       wait-ms = <10>;
//             //           #binding-cells = <1>;
//             //     };

//                 dynmacroa: dyn-macro-a {
// label = "ZM_dynamic-macro-a";
// compatible = "zmk,behavior-dynamic-macro";
// #binding-cells = <1>;
// wait-ms = <50>;
// };
// dynmacrot: dyn-macro-t {
// label = "ZM_dynamic-macro-t";
// compatible = "zmk,behavior-dynamic-macro";
// #binding-cells = <1>;
// wait-ms = <50>;
// };
// dynmacron: dyn-macro-n {
// label = "ZM_dynamic-macro-n";
// compatible = "zmk,behavior-dynamic-macro";
// #binding-cells = <1>;
// wait-ms = <50>;
// };
// dynmacros: dyn-macro-s {
// label = "ZM_dynamic-macro-s";
// compatible = "zmk,behavior-dynamic-macro";
// #binding-cells = <1>;
// wait-ms = <50>;
// };
//     };


    keymap {
        compatible = "zmk,keymap";

                    
        DEFAULT_QWERTY {
            bindings = <
        &kp EQUAL       &kp N1      &kp N2   &kp N3    &kp N4     &kp N5    &tog LAYER_MOD                                                                             &to LAYER_MOD  &kp N6   &kp N7   &kp N8     &kp N9   &kp N0   &kp MINUS
        &kp TAB         &kp Q       &kp W    &kp E     &kp R      &kp T     &tog PRIME_LAYER                                                                             &tog COLEMAK &kp Y    &kp U    &kp I      &kp O    &kp P    &kp BSLH
        &mt LCTRL ESC   &kp A       &kp S    &kp D     &kp F      &kp G     &none            &mt LCTRL HYPKEY(SPACE)   &kp LALT &kp LGUI  &mt RCTRL HYPKEY(SPACE)    &none  &kp H    &kp J    &kp K      &kp L    &kp SEMI &kp SQT
        &kp LSHFT       &kp Z       &kp X    &kp C     &kp V      &kp B                                             &kp HOME &kp PG_UP                                &kp N    &kp M    &kp COMMA  &kp DOT  &kp FSLH &kp RSHFT
        &mo LAYER_FN          &kp GRAVE   &mo 4    &kp LEFT  &kp RIGHT                    &kp BSPC &lt LAYER_QWERTY_NAV ESC              &mo SYMBOLS_LAYER    &mo SYMBOLS_LAYER     &kp ENTER  &lt SYMBOLS_LAYER SPACE                  &kp DOWN &kp UP     &kp LBKT &kp RBKT &mo LAYER_FN
            >;
        };

        LAYER_KEYPAD {
            bindings = <
        &kp EQUAL &kp N1    &kp N2    &kp N3     &kp N4    &kp N5 &trans     &to LAYER_MOD     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
        &kp TAB   &kp Q     &kp W     &kp E      &kp R     &kp T  &none      &none      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
        &kp ESC   &kp A     &kp S     &kp D      &kp F     &kp G  &none      &kp LCTRL   &kp LALT                                 &kp C_VOLUME_DOWN        &kp C_VOLUME_UP       &none     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
        &kp LSHFT &kp Z     &kp X     &kp C      &kp V     &kp B               &kp HOME         &kp C_PLAY_PAUSE           &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
        &mo COLEMAK     &kp GRAVE &kp CAPS  &kp LEFT   &kp RIGHT                 &kp BSPC          &kp DEL    &kp END  &kp C_MUTE   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN  &kp KP_DOT  &kp RBKT      &mo COLEMAK
            >;
        };
//put  &tog 5 somewhere on layer 3
        COLEMAK {
            bindings = <
        &ppipe    &pkp_n1     &lkp_n2   &lkp_n3  &lkp_n4    &akp_n5        &tog LAYER_GAMING                                                     &to LAYER_MOD           &ekp_n6  &rkp_n7  &rkp_n8   &rkp_n9   &skp_n0  &eprcnt
        &mt MEH TAB   &kp Q    &kp W &lt LAYER_FN F  &lt LAYER_FN P      &kp B   &tog PRIME_LAYER                                                     &tog COLEMAK &kp J    &kp L    &kp U     &kp Y     &kp SEMI    &ht_bhash  MEH 0
        &mt HYPER_01 ESC   &hml LGUI A       &hml LALT R     &hml LSFT S    &hml LCTL T      &lt JUMP_WORDS_LAYER G   &none    &mt LCTRL HYPKEY(SPACE) &kp LALT                    &kp LGUI  &mt RCTRL HYPKEY(SPACE)  &none &lt DELETING_LAYER M    &hmr RCTRL  N  &hmr RSHFT E     &hmr LALT I     &hmr RGUI O    &mt HYPER_01 MINUS
        &kp LSHFT  &lt LAYER_FN Z    &kp X     &kp C    &kp D      &kp V              &mo SYMBOLS_LAYER  &kp PG_UP   &kp K    &kp H    &kp COMMA     &kp DOT     &kp FSLH    &kp RSHFT
        &mo LAYER_FN     &dtilde     &gprcnt  &kp LEFT &kp RIGHT                &lt SYMBOLS_LAYER BKSP  &lt LAYER_QWERTY_NAV ESC   &caps_word             &mo SYMBOLS_LAYER &lt SYMBOLS_LAYER  ENTER &lt SYMBOLS_LAYER SPACE       &kp DOWN   &kp UP  &kp APOS  &acaret  &mo LAYER_FN
        >;
        };

        LAYER_MOD {
            bindings = <
        &to DEFAULT_QWERTY      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &tog LAYER_MOD                                                                             &to LAYER_MOD          &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &to DEFAULT_QWERTY 
        &to COLEMAK             &trans        &trans        &trans        &trans        &trans        &bootloader                                                                                &bootloader            &trans        &trans        &trans        &trans        &trans        &to COLEMAK 
        &to PRIME_LAYER         &trans        &trans        &trans        &trans        &trans        &trans             &trans        &bt BT_CLR &bt BT_CLR  &bt BT_CLR   &trans               &trans        &trans        &trans        &trans        &trans        &to PRIME_LAYER 
        &to LAYER_GAMING        &trans        &trans        &trans        &trans        &trans                                                        &trans      &trans                                                         &trans        &trans        &trans        &trans        &trans        &to LAYER_GAMING 
        &to PRIME_LAYER_NO_MODS &trans        &trans        &bl BL_INC   &bl BL_DEC                                  &rgb_ug RGB_TOG        &trans  &trans      &trans       &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &trans        &trans        &to PRIME_LAYER_NO_MODS 
            >;
        };
        
        LAYER_GAMING {
            bindings = <
       &trans  &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4 &none   &tog LAYER_GAMING                                              &to LAYER_MOD   &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp TAB        &kp Q         &kp W         &kp E        &kp R   &kp T                                                          &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp ESC        &kp A         &kp S         &kp D        &kp F   &kp G             &trans  &trans        &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp LEFT_SHIFT &kp Z         &kp X         &kp C        &kp V                             &trans        &trans                         &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp LCTRL      &trans        &trans        &trans                      &kp SPACE  &trans  &trans        &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans
            >;
        };
        //unused hypers: 33, 44, 45, 46, 57, 58, 63, 64, 
        PRIME_LAYER {
            bindings = <
        &modthumbhm HYPER_01 GRAVE  &hml HYPER_02 N1   &hml HYPER_03 N2     &hml HYPER_04 N3  &hml HYPER_05 N4 &hml HYPER_06 N5  &td_mt_kp_07_08                                                                                                                                                                                                                             &td_mt_kp_09_10   &hmr HYPER_11 N6 &hmr HYPER_12 N7  &hmr HYPER_13 N8   &hmr HYPER_14 N9           &hmr HYPER_15 N0               &modthumbhm HYPER_16 EQUAL
        &modthumbhm HYPER_17 TAB    &hml HYPER_18 SEMI &hml HYPER_19 COMMA  &hml HYPER_20 DOT &hml HYPER_21 P  &hml HYPER_22 Y   &td_mt_kp_23_24                                                                                                                                                                                                                             &custom_repeat HYPER_25 0   &hmr HYPER_27 F  &hmr HYPER_28 G   &hmr HYPER_29 C    &hmr HYPER_30 R            &hmr HYPER_31 L                &modthumbhm HYPER_32 MINUS
        &modthumbhm HYPER_33/*&thumbhlay SYMBOLS_LAYER*/ TAB    &hml_primal LCTL A        &hml_primal LALT O          &hml_primal LSFT E       &hml_primal LGUI U      &hml HYPER_34 I   &td_mt_kp_35_36                                       &thumbhSlay HYPER_37 SKQ_LEFT_RED /*HYPER_71_KEY(KP_N1)*/ &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2) &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)  &thumbhSlay HYPER_40 SKQ_RIGHT_RED /*HYPER_74_KEY(KP_N4)*/                              &td_mt_kp_41_42   &hmr HYPER_43 D  &hmr_primal RGUI H       &hmr_primal RSHFT T       &hmr_primal RALT N                &hmr_primal RCTL S                   &modthumbhm  HYPER_33/*&thumbhlay HYPER_44 SYMBOLS_LAYER*/ BKSP
        &kp LSHFT           &hml HYPER_47 APOS &hml HYPER_48 Q      &hml HYPER_49 J   &hml HYPER_50 K  &hml HYPER_51 X                                                                                               &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0)                    &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                                                                 &hmr HYPER_52 B  &hmr HYPER_53 M   &hmr HYPER_54 W    &hmr HYPER_55 V            &hmr HYPER_56 Z                &custom_shift RSHFT 0
        &mo SYMBOLS_LAYER   &kp GRAVE           &kp FSLH              &kp LEFT          &kp  RIGHT                                                     &thumbhm HYPER_58 BKSP    &thumbhlayEscape SYMBOLS_LAYER ESC                 &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP)                     &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)                      &thumbhm HYPER_63  ENTER               &thumbhm HYPER_64 SPACE                                        &kp DOWN          &kp UP             &hmr HYPER_65 LEFT_BRACKET &hmr HYPER_66 RIGHT_BRACKET    &mo SYMBOLS_LAYER
        >;
       };
         PRIME_LAYER_NO_MODS {
            bindings = <
        &modthumbhm HYPER_01 GRAVE  &hml HYPER_02 N1   &hml HYPER_03 N2     &hml HYPER_04 N3  &hml HYPER_05 N4 &hml HYPER_06 N5  &td_mt_kp_07_08                                                                                                                                                                                   &td_mt_kp_09_10   &hmr HYPER_11 N6 &hmr HYPER_12 N7  &hmr HYPER_13 N8   &hmr HYPER_14 N9           &hmr HYPER_15 N0               &modthumbhm HYPER_16 EQUAL
        &modthumbhm HYPER_17 TAB       &kp SEMI          &kp COMMA  &kp DOT    &kp P      &kp Y   &td_mt_kp_23_24                                                                                                                                                                                  &td_mt_kp_25_26   &kp F    &kp G       &kp C       &kp R       &kp L      &modthumbhm HYPER_32 BKSP
        &modthumbhm HYPER_33/*&thumbhlay SYMBOLS_LAYER*/ TAB     &kp A             &kp O      &kp E      &kp U      &kp I   &td_mt_kp_35_36                     &modthumbhm HYPER_37 HYPER_01_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_02_KEY(KP_N2) &modthumbhm HYPER_39 HYPER_03_KEY(KP_N3)  &modthumbhm HYPER_40 HYPER_04_KEY(KP_N4)                          &mt LALT CSG   &kp D    &kp H       &kp T       &kp  N      &kp S      &modthumbhm  HYPER_33/*&thumbhlay HYPER_44 SYMBOLS_LAYER*/ BKSP
        &kp LSHFT         &lt LAYER_FN APOS &kp Q      &kp J      &kp K      &kp X                                                               &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0)                      &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                                                  &kp B    &kp M       &kp W       &kp V       &kp Z      &custom_shift RSHFT 0
        &mo SYMBOLS_LAYER &kp GRAVE           &kp FSLH    &kp LEFT   &kp RIGHT                         &thumbhm HYPER_58 BKSP    &thumbhlayEscape SYMBOLS_LAYER ESC                  &modthumbhm  HYPER_59 HYPER_17_KEY(PG_UP)                     &modthumbhm  HYPER_61 HYPER_28_KEY(PG_DN)                        &thumbhm HYPER_63  ENTER               &thumbhm HYPER_64 SPACE                         &kp DOWN    &kp UP      &hmr HYPER_65 LEFT_BRACKET &hmr HYPER_66 RIGHT_BRACKET    &mo SYMBOLS_LAYER
        >;
        };
    //    prime_layer_5 {
    //   bindings = <
    //     &ppipe    &kp N1      &kp N2   &kp N3    &kp N4     &kp N5        &tog 3                                                     &to 3      &kp N6     &kp N7     &kp N8     &kp N9     &kp N0  &eprcnt
    //     &mt MEH TAB   &kp SEMI    &kp COMMA &lt 12 DOT  &lt 12 P      &kp Y   &tog 3                                                       &trans &kp F    &kp G    &lt 8 C     &kp R     &kp L    &ht_bhash  MEH 0
    //     &mt HYPER_01 TAB   &hm LGUI A       &hm LALT O     &hm LSFT E    &hm LCTL U      &lt 9 I   &kp CARET    &mt LCTRL HYP(SPACE) &kp LALT                    &kp LGUI  &mt RCTRL HYP(SPACE)  &kp HASH &lt 8 D    &kp H  &hm RSHFT T     &hm LALT N     &hm RGUI S    &mt HYPER_01 MINUS
    //     &kp LSHFT &lt 12 APOS    &kp Q     &kp J    &kp K      &kp X                             &mo 7             &mo 7                  &kp B    &hm RCTRL M    &kp W     &kp V     &kp Z    &custom_shift RSHFT 0
    //     &mo 12     &dtilde     &gprcnt  &kp LEFT &kp RIGHT                &lt 12 BKSP  &lt 6 ESC    &trans             &mt HYPER_01 TAB &lt 12  ENTER &mt HYPER_01 SPACE       &kp DOWN   &kp UP  &kp FSLH  &acaret  &mo 12
    //     >;
    // };

        LAYER_QWERTY_NAV {
            bindings = <
       &trans  &trans     &trans  &trans    &trans           &trans            &trans                                                                 &trans  &trans     &kp LG(LS(TAB))          &kp LG(TAB)         &trans  &trans  &trans
       &trans  &trans     &trans  &trans    &trans           &trans            &trans                                                                 &trans  &trans  &kp HYPERKEY(LEFT)  &kp HYPERKEY(RIGHT)  &kp HYPKEY(O)  &trans  &trans
       &trans  &trans     &kp C_VOLUME_DOWN &kp C_PLAY_PAUSE &kp C_VOLUME_UP   &kp C_MUTE            &trans  &trans  &trans             &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp LG(Z)  &kp LG(X)         &kp LG(C)        &kp LG(V)  &kp LG(LS((Z)))                                 &trans  &trans                   &trans          &kp HYPERKEY(M)       &kp HYPERKEY(COMMA)           &trans  &trans  &trans
       &trans  &trans     &trans            &trans           &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };

         SYMBOLS_LAYER {
      bindings = <
        &kp F1           &kp F2         &kp F3         &kp F4          &kp F5  &kp F6 &tog LAYER_KEYPAD                                                                       &to LAYER_MOD &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
        &macro_equal_space   &hml HYPER_18 AT     &hml HYPER_19 UNDER    &hml HYPER_20 LBKT    &hml HYPER_21 RBKT      &kp CARET  &none                                                                        &none &kp EXCL  &hmr HYPER_28 LT  &hmr HYPER_29 GT     &hmr HYPER_30 EQUAL    &hmr HYPER_31 AMPS    &kp BKSP
        &macro_const   &hml_primal LCTL BSLH     &hml_primal LALT FSLH    &hml_primal LSFT LBRC    &hml_primal LGUI RBRC      &kp ASTRK  &none                            &kp LCTRL &kp LALT             &kp LGUI  &kp RCTRL           &none &kp QMARK  &hmr_primal RGUI LPAR  &hmr_primal RSHFT RPAR     &hmr_primal RALT  MINUS    &hmr_primal RCTL COLON &kp BKSP
        &trans &hml HYPER_47 POUND     &hml HYPER_48 DLLR    &hml HYPER_49 PIPE    &hml HYPER_50 TILDE      &kp GRAVE                                                              &kp HOME             &kp PG_UP                           &kp PLUS  &hmr HYPER_53 PRCNT  &hmr HYPER_54 DOUBLE_QUOTES &hmr HYPER_55 SINGLE_QUOTE  &hmr HYPER_56 SEMICOLON &kp SPACE
        &macro_delete_whole_line     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                                       &kp BSPC &kp DEL   &kp END              &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo COLEMAK
      >;
    };   

      DELETING_LAYER {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans &macro_delete_whole_line &macro_delete_till_start_line &macro_delete_till_end_line  &trans  &trans            &trans                                                                  &trans  &trans  &kp HYPERKEY(LEFT)  &kp HYPERKEY(RIGHT)  &kp LC(LS(A))  &trans  &trans
       &trans  &kp LA(BKSP) &kp BKSP &kp DEL &kp LA(DEL)  &trans &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(LS((Z)))                   &trans                                                  &trans                          &trans          &trans        &trans           &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
    JUMP_WORDS_LAYER {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans   &kp LA(LEFT) &kp LG(LEFT)              &kp LG(RIGHT) &kp LA(RIGHT)  &trans &trans
       &trans  &trans  &lt SELECTING_LAYER_ON_RIGHT O &lt DELETING_LAYER_ON_RIGHT E &trans    &trans            &trans  &trans  &trans                                                  &trans  &trans  &trans                     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT     &kp ENTER  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                            &trans                                                  &trans                          &kp LG(Z)          &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(LS((Z)))  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
        DELETING_LAYER_ON_RIGHT {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans   &macro_delete_whole_line &macro_delete_till_start_line              &macro_delete_till_end_line &trans  &trans &trans
       &trans  &trans  &lt SELECTING_LAYER_ON_RIGHT O  &lt DELETING_LAYER_ON_RIGHT E  &trans  &trans            &trans  &trans  &trans                                              &trans  &trans  &trans                     &kp LG(BKSP) &kp BKSP &kp DEL &kp LG(DEL)     &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                              &trans                                                              &kp LG(Z)          &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(LS((Z)))  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
        SELECTING_LAYER_ON_RIGHT {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans   &macro_select_whole_line &kp LS(HOME)  &kp LS(END) &trans  &trans &trans
       &trans  &trans  &lt SELECTING_LAYER_ON_RIGHT O  &lt DELETING_LAYER_ON_RIGHT E  &trans  &trans            &trans  &trans  &trans                                              &trans  &trans  &trans                &kp LS(LEFT)     &kp LS(LA(LEFT))   &kp LS(LA(RIGHT)) &kp LS(RIGHT)    &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                            &trans                                                  &trans                          &kp LG(Z)          &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(LS((Z)))  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
        LAYER_FN {
            bindings = <
       &kp F1           &kp F2         &kp F3         &kp F4          &kp F5  &kp F6            &tog LAYER_KEYPAD                                  &to LAYER_MOD  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
       &trans           &trans         &trans         &trans          &trans  &trans             &trans                                   &trans  &kp ENTER  &kp N7     &kp N8      &kp N9     &kp  N0   &trans
       &trans  &macro_brackets  &macro_braces  &macro_parens  &macro_dquotes  &trans             &trans  &trans  &trans                   &trans   &trans    &trans  &kp DOT   &kp N4  &kp N5  &kp N6   &kp  BSPC   &trans
       &trans           &trans         &trans         &trans          &trans  &trans                              &trans                     &trans                       &kp COMMA  &kp N1  &kp N2  &kp N3  &kp PLUS  &trans
       &trans           &trans         &trans         &trans          &trans  &trans            &trans  &trans  &trans  &trans  &trans   &kp BSPC  &kp EQUAL  &kp FSLH  &kp ASTRK  &trans
            >;
        };
        
        SKQ_LEFT_RED {
            bindings = <
        &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
        &trans  &skq RS(LA(LS(LG(LCTRL)))) &skq RC(RA(RG(RS(LA(LSHFT)))))  &skq RC(RA(RG(RS(LA(LGUI))))) &skq RC(RA(RG(RS(LA(LCTRL))))) &skq RC(RA(RG(RS(LS(LGUI))))) &trans                                                                                                                                                                                                                         &trans   &skq RC(RA(RG(RS(LS(LCTRL)))))  &skq RC(RA(RG(RS(LG(LCTRL)))))   &skq RC(RA(RG(LA(LS(LGUI)))))  &skq RC(RA(RG(LA(LS(LCTRL)))))  &skq RC(RA(RG(LA(LG(LCTRL)))))  &trans
        &trans  &skq RC(RA(RG(LS(LG(LCTRL)))))    &skq RC(RA(RS(LA(LS(LGUI)))))      &skq RC(RA(RS(LA(LS(LCTRL)))))   &skq RC(RA(RS(LA(LG(LCTRL))))) &skq RC(RA(RS(LS(LG(LCTRL))))) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &skq RC(RA(LA(LS(LG(LCTRL)))))  &skq RC(RG(RS(LA(LS(LGUI)))))   &skq RC(RG(RS(LA(LS(LCTRL)))))  &skq RC(RG(RS(LA(LG(LCTRL)))))  &skq RC(RG(RS(LS(LG(LCTRL)))))  &trans
        &trans  &skq RC(RG(LA(LS(LG(LCTRL))))) &skq RC(RS(LA(LS(LG(LCTRL)))))      &skq RA(RG(RS(LA(LS(LGUI)))))   &skq RA(RG(RS(LA(LS(LCTRL))))) &skq RA(RG(RS(LA(LG(LCTRL)))))                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &skq RA(RG(RS(LS(LG(LCTRL)))))  &skq RA(RG(LA(LS(LG(LCTRL)))))   &skq RA(RS(LA(LS(LG(LCTRL)))))  &skq RG(RS(LA(LS(LG(LCTRL)))))  &skq RG(LA(LS(LG(LCTRL))))  &trans
        &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
        >;
       };


        SKQ_RIGHT_RED {
            bindings = <
        &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
        &trans  &skq RC(RG(RS(LS(LCTRL)))) &skq RC(RG(RS(LG(LCTRL))))  &skq RC(RG(LA(LS(LGUI)))) &skq RC(RG(LA(LS(LCTRL)))) &skq RC(RG(LA(LG(LCTRL)))) &trans                                                                                                                                                                                                                         &trans   &skq RC(RG(LS(LG(LCTRL))))  &skq RC(RS(LA(LS(LGUI))))   &skq RC(RS(LA(LS(LCTRL))))  &skq RC(RS(LA(LG(LCTRL))))  &skq RC(RS(LS(LG(LCTRL))))  &trans
        &trans  &skq RC(LA(LS(LG(LCTRL))))    &skq RA(RG(RS(LA(LSHFT))))      &skq RA(RG(RS(LA(LGUI))))   &skq RA(RG(RS(LA(LCTRL)))) &skq RA(RG(RS(LS(LGUI)))) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &skq RA(RG(RS(LS(LCTRL))))  &skq RA(RG(RS(LG(LCTRL))))   &skq RA(RG(LA(LS(LGUI))))  &skq RA(RG(LA(LS(LCTRL))))  &skq RA(RG(LA(LG(LCTRL))))  &trans
        &trans  &skq RA(RG(LS(LG(LCTRL)))) &skq RA(RS(LA(LS(LGUI))))      &skq RA(RS(LA(LS(LCTRL))))   &skq RA(RS(LA(LG(LCTRL)))) &skq RA(RS(LS(LG(LCTRL))))                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &skq RA(LA(LS(LG(LCTRL))))  &skq RG(RS(LA(LS(LGUI))))   &skq RG(RS(LA(LS(LCTRL))))  &skq RG(RS(LA(LG(LCTRL))))  &skq RG(RS(LS(LG(LCTRL))))  &trans
        &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
        >;
       };
        // sticky layers end 
    //     SL_CROSSROADS {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &sl SL_SEMI &sl SL_COMMA  &sl SL_DOT &sl SL_P &sl SL_Y &trans                                                                                                                                                                                                                         &trans   &sl SL_F  &sl SL_G   &sl SL_C  &sl SL_R  &sl SL_L  &trans
    //     &trans  &sl SL_A    &sl SL_O      &sl SL_E   &sl SL_U &sl SL_I &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &sl SL_D  &sl SL_H   &sl SL_T  &sl SL_N  &sl SL_S  &trans
    //     &trans  &sl SL_APOS &sl SL_Q      &sl SL_J   &sl SL_K &sl SL_X                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &sl SL_B  &sl SL_M   &sl SL_W  &sl SL_V  &sl SL_Z  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_SEMI {
    //         bindings = <
    //     &trans  &trans                  &trans                    &trans                 &trans               &trans               &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_126_KEY(SEMI) &kp HYPER_126_KEY(COMMA)  &kp HYPER_126_KEY(DOT) &kp HYPER_126_KEY(P) &kp HYPER_126_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_126_KEY(F)  &kp HYPER_126_KEY(G)   &kp HYPER_126_KEY(C)  &kp HYPER_126_KEY(R)  &kp HYPER_126_KEY(L)  &trans
    //     &trans  &kp HYPER_126_KEY(A)    &kp HYPER_126_KEY(O)      &kp HYPER_126_KEY(E)   &kp HYPER_126_KEY(U) &kp HYPER_126_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_126_KEY(D)  &kp HYPER_126_KEY(H)   &kp HYPER_126_KEY(T)  &kp HYPER_126_KEY(N)  &kp HYPER_126_KEY(S)  &trans
    //     &trans  &kp HYPER_126_KEY(APOS) &kp HYPER_126_KEY(Q)      &kp HYPER_126_KEY(J)   &kp HYPER_126_KEY(K) &kp HYPER_126_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_126_KEY(B)  &kp HYPER_126_KEY(M)   &kp HYPER_126_KEY(W)  &kp HYPER_126_KEY(V)  &kp HYPER_126_KEY(Z)  &trans
    //     &trans  &trans                  &trans                    &trans                 &trans                                             &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_COMMA {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_127_KEY(SEMI)  &kp HYPER_127_KEY(COMMA)  &kp HYPER_127_KEY(DOT) &kp HYPER_127_KEY(P) &kp HYPER_127_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_127_KEY(F)  &kp HYPER_127_KEY(G)   &kp HYPER_127_KEY(C)  &kp HYPER_127_KEY(R)  &kp HYPER_127_KEY(L)  &trans
    //     &trans  &kp HYPER_127_KEY(A)    &kp HYPER_127_KEY(O)      &kp HYPER_127_KEY(E)   &kp HYPER_127_KEY(U) &kp HYPER_127_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_127_KEY(D)  &kp HYPER_127_KEY(H)   &kp HYPER_127_KEY(T)  &kp HYPER_127_KEY(N)  &kp HYPER_127_KEY(S)  &trans
    //     &trans  &kp HYPER_127_KEY(APOS) &kp HYPER_127_KEY(Q)      &kp HYPER_127_KEY(J)   &kp HYPER_127_KEY(K) &kp HYPER_127_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_127_KEY(B)  &kp HYPER_127_KEY(M)   &kp HYPER_127_KEY(W)  &kp HYPER_127_KEY(V)  &kp HYPER_127_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_DOT {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_128_KEY(SEMI)  &kp HYPER_128_KEY(COMMA)  &kp HYPER_128_KEY(DOT) &kp HYPER_128_KEY(P) &kp HYPER_128_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_128_KEY(F)  &kp HYPER_128_KEY(G)   &kp HYPER_128_KEY(C)  &kp HYPER_128_KEY(R)  &kp HYPER_128_KEY(L)  &trans
    //     &trans  &kp HYPER_128_KEY(A)    &kp HYPER_128_KEY(O)      &kp HYPER_128_KEY(E)   &kp HYPER_128_KEY(U) &kp HYPER_128_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_128_KEY(D)  &kp HYPER_128_KEY(H)   &kp HYPER_128_KEY(T)  &kp HYPER_128_KEY(N)  &kp HYPER_128_KEY(S)  &trans
    //     &trans  &kp HYPER_128_KEY(APOS) &kp HYPER_128_KEY(Q)      &kp HYPER_128_KEY(J)   &kp HYPER_128_KEY(K) &kp HYPER_128_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_128_KEY(B)  &kp HYPER_128_KEY(M)   &kp HYPER_128_KEY(W)  &kp HYPER_128_KEY(V)  &kp HYPER_128_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_P {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_129_KEY(SEMI)  &kp HYPER_129_KEY(COMMA)  &kp HYPER_129_KEY(DOT) &kp HYPER_129_KEY(P) &kp HYPER_129_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_129_KEY(F)  &kp HYPER_129_KEY(G)   &kp HYPER_129_KEY(C)  &kp HYPER_129_KEY(R)  &kp HYPER_129_KEY(L)  &trans
    //     &trans  &kp HYPER_129_KEY(A)    &kp HYPER_129_KEY(O)      &kp HYPER_129_KEY(E)   &kp HYPER_129_KEY(U) &kp HYPER_129_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_129_KEY(D)  &kp HYPER_129_KEY(H)   &kp HYPER_129_KEY(T)  &kp HYPER_129_KEY(N)  &kp HYPER_129_KEY(S)  &trans
    //     &trans  &kp HYPER_129_KEY(APOS) &kp HYPER_129_KEY(Q)      &kp HYPER_129_KEY(J)   &kp HYPER_129_KEY(K) &kp HYPER_129_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_129_KEY(B)  &kp HYPER_129_KEY(M)   &kp HYPER_129_KEY(W)  &kp HYPER_129_KEY(V)  &kp HYPER_129_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_Y {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_130_KEY(SEMI)  &kp HYPER_130_KEY(COMMA)  &kp HYPER_130_KEY(DOT) &kp HYPER_130_KEY(P) &kp HYPER_130_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_130_KEY(F)  &kp HYPER_130_KEY(G)   &kp HYPER_130_KEY(C)  &kp HYPER_130_KEY(R)  &kp HYPER_130_KEY(L)  &trans
    //     &trans  &kp HYPER_130_KEY(A)    &kp HYPER_130_KEY(O)      &kp HYPER_130_KEY(E)   &kp HYPER_130_KEY(U) &kp HYPER_130_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_130_KEY(D)  &kp HYPER_130_KEY(H)   &kp HYPER_130_KEY(T)  &kp HYPER_130_KEY(N)  &kp HYPER_130_KEY(S)  &trans
    //     &trans  &kp HYPER_130_KEY(APOS) &kp HYPER_130_KEY(Q)      &kp HYPER_130_KEY(J)   &kp HYPER_130_KEY(K) &kp HYPER_130_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_130_KEY(B)  &kp HYPER_130_KEY(M)   &kp HYPER_130_KEY(W)  &kp HYPER_130_KEY(V)  &kp HYPER_130_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_F {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_131_KEY(SEMI)  &kp HYPER_131_KEY(COMMA)  &kp HYPER_131_KEY(DOT) &kp HYPER_131_KEY(P) &kp HYPER_131_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_131_KEY(F)  &kp HYPER_131_KEY(G)   &kp HYPER_131_KEY(C)  &kp HYPER_131_KEY(R)  &kp HYPER_131_KEY(L)  &trans
    //     &trans  &kp HYPER_131_KEY(A)    &kp HYPER_131_KEY(O)      &kp HYPER_131_KEY(E)   &kp HYPER_131_KEY(U) &kp HYPER_131_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_131_KEY(D)  &kp HYPER_131_KEY(H)   &kp HYPER_131_KEY(T)  &kp HYPER_131_KEY(N)  &kp HYPER_131_KEY(S)  &trans
    //     &trans  &kp HYPER_131_KEY(APOS) &kp HYPER_131_KEY(Q)      &kp HYPER_131_KEY(J)   &kp HYPER_131_KEY(K) &kp HYPER_131_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_131_KEY(B)  &kp HYPER_131_KEY(M)   &kp HYPER_131_KEY(W)  &kp HYPER_131_KEY(V)  &kp HYPER_131_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_G {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_132_KEY(SEMI)  &kp HYPER_132_KEY(COMMA)  &kp HYPER_132_KEY(DOT) &kp HYPER_132_KEY(P) &kp HYPER_132_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_132_KEY(F)  &kp HYPER_132_KEY(G)   &kp HYPER_132_KEY(C)  &kp HYPER_132_KEY(R)  &kp HYPER_132_KEY(L)  &trans
    //     &trans  &kp HYPER_132_KEY(A)    &kp HYPER_132_KEY(O)      &kp HYPER_132_KEY(E)   &kp HYPER_132_KEY(U) &kp HYPER_132_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_132_KEY(D)  &kp HYPER_132_KEY(H)   &kp HYPER_132_KEY(T)  &kp HYPER_132_KEY(N)  &kp HYPER_132_KEY(S)  &trans
    //     &trans  &kp HYPER_132_KEY(APOS) &kp HYPER_132_KEY(Q)      &kp HYPER_132_KEY(J)   &kp HYPER_132_KEY(K) &kp HYPER_132_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_132_KEY(B)  &kp HYPER_132_KEY(M)   &kp HYPER_132_KEY(W)  &kp HYPER_132_KEY(V)  &kp HYPER_132_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_R {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_133_KEY(SEMI)  &kp HYPER_133_KEY(COMMA)  &kp HYPER_133_KEY(DOT) &kp HYPER_133_KEY(P) &kp HYPER_133_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_133_KEY(F)  &kp HYPER_133_KEY(G)   &kp HYPER_133_KEY(C)  &kp HYPER_133_KEY(R)  &kp HYPER_133_KEY(L)  &trans
    //     &trans  &kp HYPER_133_KEY(A)    &kp HYPER_133_KEY(O)      &kp HYPER_133_KEY(E)   &kp HYPER_133_KEY(U) &kp HYPER_133_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_133_KEY(D)  &kp HYPER_133_KEY(H)   &kp HYPER_133_KEY(T)  &kp HYPER_133_KEY(N)  &kp HYPER_133_KEY(S)  &trans
    //     &trans  &kp HYPER_133_KEY(APOS) &kp HYPER_133_KEY(Q)      &kp HYPER_133_KEY(J)   &kp HYPER_133_KEY(K) &kp HYPER_133_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_133_KEY(B)  &kp HYPER_133_KEY(M)   &kp HYPER_133_KEY(W)  &kp HYPER_133_KEY(V)  &kp HYPER_133_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_L {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_134_KEY(SEMI)  &kp HYPER_134_KEY(COMMA)  &kp HYPER_134_KEY(DOT) &kp HYPER_134_KEY(P) &kp HYPER_134_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_134_KEY(F)  &kp HYPER_134_KEY(G)   &kp HYPER_134_KEY(C)  &kp HYPER_134_KEY(R)  &kp HYPER_134_KEY(L)  &trans
    //     &trans  &kp HYPER_134_KEY(A)    &kp HYPER_134_KEY(O)      &kp HYPER_134_KEY(E)   &kp HYPER_134_KEY(U) &kp HYPER_134_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_134_KEY(D)  &kp HYPER_134_KEY(H)   &kp HYPER_134_KEY(T)  &kp HYPER_134_KEY(N)  &kp HYPER_134_KEY(S)  &trans
    //     &trans  &kp HYPER_134_KEY(APOS) &kp HYPER_134_KEY(Q)      &kp HYPER_134_KEY(J)   &kp HYPER_134_KEY(K) &kp HYPER_134_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_134_KEY(B)  &kp HYPER_134_KEY(M)   &kp HYPER_134_KEY(W)  &kp HYPER_134_KEY(V)  &kp HYPER_134_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_A {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_135_KEY(SEMI)  &kp HYPER_135_KEY(COMMA)  &kp HYPER_135_KEY(DOT) &kp HYPER_135_KEY(P) &kp HYPER_135_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_135_KEY(F)  &kp HYPER_135_KEY(G)   &kp HYPER_135_KEY(C)  &kp HYPER_135_KEY(R)  &kp HYPER_135_KEY(L)  &trans
    //     &trans  &kp HYPER_135_KEY(A)    &kp HYPER_135_KEY(O)      &kp HYPER_135_KEY(E)   &kp HYPER_135_KEY(U) &kp HYPER_135_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_135_KEY(D)  &kp HYPER_135_KEY(H)   &kp HYPER_135_KEY(T)  &kp HYPER_135_KEY(N)  &kp HYPER_135_KEY(S)  &trans
    //     &trans  &kp HYPER_135_KEY(APOS) &kp HYPER_135_KEY(Q)      &kp HYPER_135_KEY(J)   &kp HYPER_135_KEY(K) &kp HYPER_135_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_135_KEY(B)  &kp HYPER_135_KEY(M)   &kp HYPER_135_KEY(W)  &kp HYPER_135_KEY(V)  &kp HYPER_135_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_O {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_136_KEY(SEMI)  &kp HYPER_136_KEY(COMMA)  &kp HYPER_136_KEY(DOT) &kp HYPER_136_KEY(P) &kp HYPER_136_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_136_KEY(F)  &kp HYPER_136_KEY(G)   &kp HYPER_136_KEY(C)  &kp HYPER_136_KEY(R)  &kp HYPER_136_KEY(L)  &trans
    //     &trans  &kp HYPER_136_KEY(A)    &kp HYPER_136_KEY(O)      &kp HYPER_136_KEY(E)   &kp HYPER_136_KEY(U) &kp HYPER_136_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_136_KEY(D)  &kp HYPER_136_KEY(H)   &kp HYPER_136_KEY(T)  &kp HYPER_136_KEY(N)  &kp HYPER_136_KEY(S)  &trans
    //     &trans  &kp HYPER_136_KEY(APOS) &kp HYPER_136_KEY(Q)      &kp HYPER_136_KEY(J)   &kp HYPER_136_KEY(K) &kp HYPER_136_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_136_KEY(B)  &kp HYPER_136_KEY(M)   &kp HYPER_136_KEY(W)  &kp HYPER_136_KEY(V)  &kp HYPER_136_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_E {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_137_KEY(SEMI)  &kp HYPER_137_KEY(COMMA)  &kp HYPER_137_KEY(DOT) &kp HYPER_137_KEY(P) &kp HYPER_137_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_137_KEY(F)  &kp HYPER_137_KEY(G)   &kp HYPER_137_KEY(C)  &kp HYPER_137_KEY(R)  &kp HYPER_137_KEY(L)  &trans
    //     &trans  &kp HYPER_137_KEY(A)    &kp HYPER_137_KEY(O)      &kp HYPER_137_KEY(E)   &kp HYPER_137_KEY(U) &kp HYPER_137_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_137_KEY(D)  &kp HYPER_137_KEY(H)   &kp HYPER_137_KEY(T)  &kp HYPER_137_KEY(N)  &kp HYPER_137_KEY(S)  &trans
    //     &trans  &kp HYPER_137_KEY(APOS) &kp HYPER_137_KEY(Q)      &kp HYPER_137_KEY(J)   &kp HYPER_137_KEY(K) &kp HYPER_137_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_137_KEY(B)  &kp HYPER_137_KEY(M)   &kp HYPER_137_KEY(W)  &kp HYPER_137_KEY(V)  &kp HYPER_137_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_U {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_138_KEY(SEMI)  &kp HYPER_138_KEY(COMMA)  &kp HYPER_138_KEY(DOT) &kp HYPER_138_KEY(P) &kp HYPER_138_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_138_KEY(F)  &kp HYPER_138_KEY(G)   &kp HYPER_138_KEY(C)  &kp HYPER_138_KEY(R)  &kp HYPER_138_KEY(L)  &trans
    //     &trans  &kp HYPER_138_KEY(A)    &kp HYPER_138_KEY(O)      &kp HYPER_138_KEY(E)   &kp HYPER_138_KEY(U) &kp HYPER_138_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_138_KEY(D)  &kp HYPER_138_KEY(H)   &kp HYPER_138_KEY(T)  &kp HYPER_138_KEY(N)  &kp HYPER_138_KEY(S)  &trans
    //     &trans  &kp HYPER_138_KEY(APOS) &kp HYPER_138_KEY(Q)      &kp HYPER_138_KEY(J)   &kp HYPER_138_KEY(K) &kp HYPER_138_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_138_KEY(B)  &kp HYPER_138_KEY(M)   &kp HYPER_138_KEY(W)  &kp HYPER_138_KEY(V)  &kp HYPER_138_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_I {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_139_KEY(SEMI)  &kp HYPER_139_KEY(COMMA)  &kp HYPER_139_KEY(DOT) &kp HYPER_139_KEY(P) &kp HYPER_139_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_139_KEY(F)  &kp HYPER_139_KEY(G)   &kp HYPER_139_KEY(C)  &kp HYPER_139_KEY(R)  &kp HYPER_139_KEY(L)  &trans
    //     &trans  &kp HYPER_139_KEY(A)    &kp HYPER_139_KEY(O)      &kp HYPER_139_KEY(E)   &kp HYPER_139_KEY(U) &kp HYPER_139_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_139_KEY(D)  &kp HYPER_139_KEY(H)   &kp HYPER_139_KEY(T)  &kp HYPER_139_KEY(N)  &kp HYPER_139_KEY(S)  &trans
    //     &trans  &kp HYPER_139_KEY(APOS) &kp HYPER_139_KEY(Q)      &kp HYPER_139_KEY(J)   &kp HYPER_139_KEY(K) &kp HYPER_139_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_139_KEY(B)  &kp HYPER_139_KEY(M)   &kp HYPER_139_KEY(W)  &kp HYPER_139_KEY(V)  &kp HYPER_139_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_D {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_140_KEY(SEMI)  &kp HYPER_140_KEY(COMMA)  &kp HYPER_140_KEY(DOT) &kp HYPER_140_KEY(P) &kp HYPER_140_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_140_KEY(F)  &kp HYPER_140_KEY(G)   &kp HYPER_140_KEY(C)  &kp HYPER_140_KEY(R)  &kp HYPER_140_KEY(L)  &trans
    //     &trans  &kp HYPER_140_KEY(A)    &kp HYPER_140_KEY(O)      &kp HYPER_140_KEY(E)   &kp HYPER_140_KEY(U) &kp HYPER_140_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_140_KEY(D)  &kp HYPER_140_KEY(H)   &kp HYPER_140_KEY(T)  &kp HYPER_140_KEY(N)  &kp HYPER_140_KEY(S)  &trans
    //     &trans  &kp HYPER_140_KEY(APOS) &kp HYPER_140_KEY(Q)      &kp HYPER_140_KEY(J)   &kp HYPER_140_KEY(K) &kp HYPER_140_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_140_KEY(B)  &kp HYPER_140_KEY(M)   &kp HYPER_140_KEY(W)  &kp HYPER_140_KEY(V)  &kp HYPER_140_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_H {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_141_KEY(SEMI)  &kp HYPER_141_KEY(COMMA)  &kp HYPER_141_KEY(DOT) &kp HYPER_141_KEY(P) &kp HYPER_141_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_141_KEY(F)  &kp HYPER_141_KEY(G)   &kp HYPER_141_KEY(C)  &kp HYPER_141_KEY(R)  &kp HYPER_141_KEY(L)  &trans
    //     &trans  &kp HYPER_141_KEY(A)    &kp HYPER_141_KEY(O)      &kp HYPER_141_KEY(E)   &kp HYPER_141_KEY(U) &kp HYPER_141_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_141_KEY(D)  &kp HYPER_141_KEY(H)   &kp HYPER_141_KEY(T)  &kp HYPER_141_KEY(N)  &kp HYPER_141_KEY(S)  &trans
    //     &trans  &kp HYPER_141_KEY(APOS) &kp HYPER_141_KEY(Q)      &kp HYPER_141_KEY(J)   &kp HYPER_141_KEY(K) &kp HYPER_141_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_141_KEY(B)  &kp HYPER_141_KEY(M)   &kp HYPER_141_KEY(W)  &kp HYPER_141_KEY(V)  &kp HYPER_141_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_T {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_142_KEY(SEMI)  &kp HYPER_142_KEY(COMMA)  &kp HYPER_142_KEY(DOT) &kp HYPER_142_KEY(P) &kp HYPER_142_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_142_KEY(F)  &kp HYPER_142_KEY(G)   &kp HYPER_142_KEY(C)  &kp HYPER_142_KEY(R)  &kp HYPER_142_KEY(L)  &trans
    //     &trans  &kp HYPER_142_KEY(A)    &kp HYPER_142_KEY(O)      &kp HYPER_142_KEY(E)   &kp HYPER_142_KEY(U) &kp HYPER_142_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_142_KEY(D)  &kp HYPER_142_KEY(H)   &kp HYPER_142_KEY(T)  &kp HYPER_142_KEY(N)  &kp HYPER_142_KEY(S)  &trans
    //     &trans  &kp HYPER_142_KEY(APOS) &kp HYPER_142_KEY(Q)      &kp HYPER_142_KEY(J)   &kp HYPER_142_KEY(K) &kp HYPER_142_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_142_KEY(B)  &kp HYPER_142_KEY(M)   &kp HYPER_142_KEY(W)  &kp HYPER_142_KEY(V)  &kp HYPER_142_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_N {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_143_KEY(SEMI)  &kp HYPER_143_KEY(COMMA)  &kp HYPER_143_KEY(DOT) &kp HYPER_143_KEY(P) &kp HYPER_143_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_143_KEY(F)  &kp HYPER_143_KEY(G)   &kp HYPER_143_KEY(C)  &kp HYPER_143_KEY(R)  &kp HYPER_143_KEY(L)  &trans
    //     &trans  &kp HYPER_143_KEY(A)    &kp HYPER_143_KEY(O)      &kp HYPER_143_KEY(E)   &kp HYPER_143_KEY(U) &kp HYPER_143_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_143_KEY(D)  &kp HYPER_143_KEY(H)   &kp HYPER_143_KEY(T)  &kp HYPER_143_KEY(N)  &kp HYPER_143_KEY(S)  &trans
    //     &trans  &kp HYPER_143_KEY(APOS) &kp HYPER_143_KEY(Q)      &kp HYPER_143_KEY(J)   &kp HYPER_143_KEY(K) &kp HYPER_143_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_143_KEY(B)  &kp HYPER_143_KEY(M)   &kp HYPER_143_KEY(W)  &kp HYPER_143_KEY(V)  &kp HYPER_143_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_S {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_144_KEY(SEMI)  &kp HYPER_144_KEY(COMMA)  &kp HYPER_144_KEY(DOT) &kp HYPER_144_KEY(P) &kp HYPER_144_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_144_KEY(F)  &kp HYPER_144_KEY(G)   &kp HYPER_144_KEY(C)  &kp HYPER_144_KEY(R)  &kp HYPER_144_KEY(L)  &trans
    //     &trans  &kp HYPER_144_KEY(A)    &kp HYPER_144_KEY(O)      &kp HYPER_144_KEY(E)   &kp HYPER_144_KEY(U) &kp HYPER_144_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_144_KEY(D)  &kp HYPER_144_KEY(H)   &kp HYPER_144_KEY(T)  &kp HYPER_144_KEY(N)  &kp HYPER_144_KEY(S)  &trans
    //     &trans  &kp HYPER_144_KEY(APOS) &kp HYPER_144_KEY(Q)      &kp HYPER_144_KEY(J)   &kp HYPER_144_KEY(K) &kp HYPER_144_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_144_KEY(B)  &kp HYPER_144_KEY(M)   &kp HYPER_144_KEY(W)  &kp HYPER_144_KEY(V)  &kp HYPER_144_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_APOS {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_145_KEY(SEMI)  &kp HYPER_145_KEY(COMMA)  &kp HYPER_145_KEY(DOT) &kp HYPER_145_KEY(P) &kp HYPER_145_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_145_KEY(F)  &kp HYPER_145_KEY(G)   &kp HYPER_145_KEY(C)  &kp HYPER_145_KEY(R)  &kp HYPER_145_KEY(L)  &trans
    //     &trans  &kp HYPER_145_KEY(A)    &kp HYPER_145_KEY(O)      &kp HYPER_145_KEY(E)   &kp HYPER_145_KEY(U) &kp HYPER_145_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_145_KEY(D)  &kp HYPER_145_KEY(H)   &kp HYPER_145_KEY(T)  &kp HYPER_145_KEY(N)  &kp HYPER_145_KEY(S)  &trans
    //     &trans  &kp HYPER_145_KEY(APOS) &kp HYPER_145_KEY(Q)      &kp HYPER_145_KEY(J)   &kp HYPER_145_KEY(K) &kp HYPER_145_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_145_KEY(B)  &kp HYPER_145_KEY(M)   &kp HYPER_145_KEY(W)  &kp HYPER_145_KEY(V)  &kp HYPER_145_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_Q {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_146_KEY(SEMI)  &kp HYPER_146_KEY(COMMA)  &kp HYPER_146_KEY(DOT) &kp HYPER_146_KEY(P) &kp HYPER_146_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_146_KEY(F)  &kp HYPER_146_KEY(G)   &kp HYPER_146_KEY(C)  &kp HYPER_146_KEY(R)  &kp HYPER_146_KEY(L)  &trans
    //     &trans  &kp HYPER_146_KEY(A)    &kp HYPER_146_KEY(O)      &kp HYPER_146_KEY(E)   &kp HYPER_146_KEY(U) &kp HYPER_146_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_146_KEY(D)  &kp HYPER_146_KEY(H)   &kp HYPER_146_KEY(T)  &kp HYPER_146_KEY(N)  &kp HYPER_146_KEY(S)  &trans
    //     &trans  &kp HYPER_146_KEY(APOS) &kp HYPER_146_KEY(Q)      &kp HYPER_146_KEY(J)   &kp HYPER_146_KEY(K) &kp HYPER_146_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_146_KEY(B)  &kp HYPER_146_KEY(M)   &kp HYPER_146_KEY(W)  &kp HYPER_146_KEY(V)  &kp HYPER_146_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_J {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_147_KEY(SEMI)  &kp HYPER_147_KEY(COMMA)  &kp HYPER_147_KEY(DOT) &kp HYPER_147_KEY(P) &kp HYPER_147_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_147_KEY(F)  &kp HYPER_147_KEY(G)   &kp HYPER_147_KEY(C)  &kp HYPER_147_KEY(R)  &kp HYPER_147_KEY(L)  &trans
    //     &trans  &kp HYPER_147_KEY(A)    &kp HYPER_147_KEY(O)      &kp HYPER_147_KEY(E)   &kp HYPER_147_KEY(U) &kp HYPER_147_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_147_KEY(D)  &kp HYPER_147_KEY(H)   &kp HYPER_147_KEY(T)  &kp HYPER_147_KEY(N)  &kp HYPER_147_KEY(S)  &trans
    //     &trans  &kp HYPER_147_KEY(APOS) &kp HYPER_147_KEY(Q)      &kp HYPER_147_KEY(J)   &kp HYPER_147_KEY(K) &kp HYPER_147_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_147_KEY(B)  &kp HYPER_147_KEY(M)   &kp HYPER_147_KEY(W)  &kp HYPER_147_KEY(V)  &kp HYPER_147_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_K {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_148_KEY(SEMI)  &kp HYPER_148_KEY(COMMA)  &kp HYPER_148_KEY(DOT) &kp HYPER_148_KEY(P) &kp HYPER_148_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_148_KEY(F)  &kp HYPER_148_KEY(G)   &kp HYPER_148_KEY(C)  &kp HYPER_148_KEY(R)  &kp HYPER_148_KEY(L)  &trans
    //     &trans  &kp HYPER_148_KEY(A)    &kp HYPER_148_KEY(O)      &kp HYPER_148_KEY(E)   &kp HYPER_148_KEY(U) &kp HYPER_148_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_148_KEY(D)  &kp HYPER_148_KEY(H)   &kp HYPER_148_KEY(T)  &kp HYPER_148_KEY(N)  &kp HYPER_148_KEY(S)  &trans
    //     &trans  &kp HYPER_148_KEY(APOS) &kp HYPER_148_KEY(Q)      &kp HYPER_148_KEY(J)   &kp HYPER_148_KEY(K) &kp HYPER_148_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_148_KEY(B)  &kp HYPER_148_KEY(M)   &kp HYPER_148_KEY(W)  &kp HYPER_148_KEY(V)  &kp HYPER_148_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_X {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_149_KEY(SEMI)  &kp HYPER_149_KEY(COMMA)  &kp HYPER_149_KEY(DOT) &kp HYPER_149_KEY(P) &kp HYPER_149_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_149_KEY(F)  &kp HYPER_149_KEY(G)   &kp HYPER_149_KEY(C)  &kp HYPER_149_KEY(R)  &kp HYPER_149_KEY(L)  &trans
    //     &trans  &kp HYPER_149_KEY(A)    &kp HYPER_149_KEY(O)      &kp HYPER_149_KEY(E)   &kp HYPER_149_KEY(U) &kp HYPER_149_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_149_KEY(D)  &kp HYPER_149_KEY(H)   &kp HYPER_149_KEY(T)  &kp HYPER_149_KEY(N)  &kp HYPER_149_KEY(S)  &trans
    //     &trans  &kp HYPER_149_KEY(APOS) &kp HYPER_149_KEY(Q)      &kp HYPER_149_KEY(J)   &kp HYPER_149_KEY(K) &kp HYPER_149_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_149_KEY(B)  &kp HYPER_149_KEY(M)   &kp HYPER_149_KEY(W)  &kp HYPER_149_KEY(V)  &kp HYPER_149_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_B {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_150_KEY(SEMI)  &kp HYPER_150_KEY(COMMA)  &kp HYPER_150_KEY(DOT) &kp HYPER_150_KEY(P) &kp HYPER_150_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_150_KEY(F)  &kp HYPER_150_KEY(G)   &kp HYPER_150_KEY(C)  &kp HYPER_150_KEY(R)  &kp HYPER_150_KEY(L)  &trans
    //     &trans  &kp HYPER_150_KEY(A)    &kp HYPER_150_KEY(O)      &kp HYPER_150_KEY(E)   &kp HYPER_150_KEY(U) &kp HYPER_150_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_150_KEY(D)  &kp HYPER_150_KEY(H)   &kp HYPER_150_KEY(T)  &kp HYPER_150_KEY(N)  &kp HYPER_150_KEY(S)  &trans
    //     &trans  &kp HYPER_150_KEY(APOS) &kp HYPER_150_KEY(Q)      &kp HYPER_150_KEY(J)   &kp HYPER_150_KEY(K) &kp HYPER_150_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_150_KEY(B)  &kp HYPER_150_KEY(M)   &kp HYPER_150_KEY(W)  &kp HYPER_150_KEY(V)  &kp HYPER_150_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_M {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_151_KEY(SEMI)  &kp HYPER_151_KEY(COMMA)  &kp HYPER_151_KEY(DOT) &kp HYPER_151_KEY(P) &kp HYPER_151_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_151_KEY(F)  &kp HYPER_151_KEY(G)   &kp HYPER_151_KEY(C)  &kp HYPER_151_KEY(R)  &kp HYPER_151_KEY(L)  &trans
    //     &trans  &kp HYPER_151_KEY(A)    &kp HYPER_151_KEY(O)      &kp HYPER_151_KEY(E)   &kp HYPER_151_KEY(U) &kp HYPER_151_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_151_KEY(D)  &kp HYPER_151_KEY(H)   &kp HYPER_151_KEY(T)  &kp HYPER_151_KEY(N)  &kp HYPER_151_KEY(S)  &trans
    //     &trans  &kp HYPER_151_KEY(APOS) &kp HYPER_151_KEY(Q)      &kp HYPER_151_KEY(J)   &kp HYPER_151_KEY(K) &kp HYPER_151_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_151_KEY(B)  &kp HYPER_151_KEY(M)   &kp HYPER_151_KEY(W)  &kp HYPER_151_KEY(V)  &kp HYPER_151_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_W {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_152_KEY(SEMI)  &kp HYPER_152_KEY(COMMA)  &kp HYPER_152_KEY(DOT) &kp HYPER_152_KEY(P) &kp HYPER_152_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_152_KEY(F)  &kp HYPER_152_KEY(G)   &kp HYPER_152_KEY(C)  &kp HYPER_152_KEY(R)  &kp HYPER_152_KEY(L)  &trans
    //     &trans  &kp HYPER_152_KEY(A)    &kp HYPER_152_KEY(O)      &kp HYPER_152_KEY(E)   &kp HYPER_152_KEY(U) &kp HYPER_152_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_152_KEY(D)  &kp HYPER_152_KEY(H)   &kp HYPER_152_KEY(T)  &kp HYPER_152_KEY(N)  &kp HYPER_152_KEY(S)  &trans
    //     &trans  &kp HYPER_152_KEY(APOS) &kp HYPER_152_KEY(Q)      &kp HYPER_152_KEY(J)   &kp HYPER_152_KEY(K) &kp HYPER_152_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_152_KEY(B)  &kp HYPER_152_KEY(M)   &kp HYPER_152_KEY(W)  &kp HYPER_152_KEY(V)  &kp HYPER_152_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_V {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_153_KEY(SEMI)  &kp HYPER_153_KEY(COMMA)  &kp HYPER_153_KEY(DOT) &kp HYPER_153_KEY(P) &kp HYPER_153_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_153_KEY(F)  &kp HYPER_153_KEY(G)   &kp HYPER_153_KEY(C)  &kp HYPER_153_KEY(R)  &kp HYPER_153_KEY(L)  &trans
    //     &trans  &kp HYPER_153_KEY(A)    &kp HYPER_153_KEY(O)      &kp HYPER_153_KEY(E)   &kp HYPER_153_KEY(U) &kp HYPER_153_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_153_KEY(D)  &kp HYPER_153_KEY(H)   &kp HYPER_153_KEY(T)  &kp HYPER_153_KEY(N)  &kp HYPER_153_KEY(S)  &trans
    //     &trans  &kp HYPER_153_KEY(APOS) &kp HYPER_153_KEY(Q)      &kp HYPER_153_KEY(J)   &kp HYPER_153_KEY(K) &kp HYPER_153_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_153_KEY(B)  &kp HYPER_153_KEY(M)   &kp HYPER_153_KEY(W)  &kp HYPER_153_KEY(V)  &kp HYPER_153_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

    //     SL_Z {
    //         bindings = <
    //     &trans  &trans      &trans        &trans     &trans   &trans   &trans                                                                                                                                                                                                                         &trans   &trans    &trans     &trans    &trans    &trans    &trans
    //     &trans  &kp HYPER_154_KEY(SEMI)  &kp HYPER_154_KEY(COMMA)  &kp HYPER_154_KEY(DOT) &kp HYPER_154_KEY(P) &kp HYPER_154_KEY(Y) &trans                                                                                                                                                                                                                         &trans   &kp HYPER_154_KEY(F)  &kp HYPER_154_KEY(G)   &kp HYPER_154_KEY(C)  &kp HYPER_154_KEY(R)  &kp HYPER_154_KEY(L)  &trans
    //     &trans  &kp HYPER_154_KEY(A)    &kp HYPER_154_KEY(O)      &kp HYPER_154_KEY(E)   &kp HYPER_154_KEY(U) &kp HYPER_154_KEY(I) &trans                          &modthumbhm HYPER_37 HYPER_71_KEY(KP_N1) &modthumbhm HYPER_38 HYPER_72_KEY(KP_N2)  &modthumbhm HYPER_39 HYPER_73_KEY(KP_N3)   &modthumbhm HYPER_40 HYPER_74_KEY(KP_N4)                         &trans   &kp HYPER_154_KEY(D)  &kp HYPER_154_KEY(H)   &kp HYPER_154_KEY(T)  &kp HYPER_154_KEY(N)  &kp HYPER_154_KEY(S)  &trans
    //     &trans  &kp HYPER_154_KEY(APOS) &kp HYPER_154_KEY(Q)      &kp HYPER_154_KEY(J)   &kp HYPER_154_KEY(K) &kp HYPER_154_KEY(X)                                                                          &modthumbhm HYPER_66 HYPER_127_KEY(KP_N0) &modthumbhm  HYPER_69 HYPER_128_KEY(KP_N0)                                                                           &kp HYPER_154_KEY(B)  &kp HYPER_154_KEY(M)   &kp HYPER_154_KEY(W)  &kp HYPER_154_KEY(V)  &kp HYPER_154_KEY(Z)  &trans
    //     &trans  &trans      &trans        &trans     &trans                     &thumbhm HYPER_58 BKSP &thumbhlay SYMBOLS_LAYER ESC             &modthumbhm  HYPER_59 HYPER_77_KEY(PG_UP) &modthumbhm  HYPER_61 HYPER_78_KEY(PG_DN)  &thumbhm HYPER_63  ENTER                 &thumbhm HYPER_64 SPACE                    &trans     &trans    &trans    &trans    &trans
    //     >;
    //    };

       // sticky layers end
    //             layer_fn_12 {
    //         bindings = <
    //    &kp F1           &kp F2         &kp F3         &kp F4          &kp F5  &kp F6            &tog 1                                  &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
    //    &trans           &trans         &trans         &trans          &trans  &trans             &none                                   &none  &kp KP_ENTER  &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_N0   &trans
    //    &trans  &macro_brackets  &macro_braces  &macro_parens  &macro_dquotes  &trans             &none  &trans  &trans                   &kp F19   &kp F24    &none  &kp DOT   &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS   &trans
    //    &trans           &trans         &trans         &trans          &trans  &trans               &trans      &trans      &kp COMMA  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_PLUS  &trans
    //    &trans           &trans         &trans         &trans          &trans  &trans            &trans  &trans  &trans  &trans  &trans   &kp KP_NUM  &kp EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
    //         >;
    //     };

  };
};





// all possible modifier combos that can be distinguished by karabiner (70 total)
// LS,LC,LA,LG
// RS,RC,RA,RG
// RS,RC,RA,LS
// RS,RC,RA,LC
// RS,RC,RA,LA
// RS,RC,RA,LG
// RS,RC,RG,LS
// RS,RC,RG,LC
// RS,RC,RG,LA
// RS,RC,RG,LG
// RS,RC,LS,LC
// RS,RC,LS,LA
// RS,RC,LS,LG
// RS,RC,LC,LA
// RS,RC,LC,LG
// RS,RC,LA,LG
// RS,RA,RG,LS
// RS,RA,RG,LC
// RS,RA,RG,LA
// RS,RA,RG,LG
// RS,RA,LS,LC
// RS,RA,LS,LA
// RS,RA,LS,LG
// RS,RA,LC,LA
// RS,RA,LC,LG
// RS,RA,LA,LG
// RS,RG,LS,LC
// RS,RG,LS,LA
// RS,RG,LS,LG
// RS,RG,LC,LA
// RS,RG,LC,LG
// RS,RG,LA,LG
// RS,LS,LC,LA
// RS,LS,LC,LG
// RS,LS,LA,LG
// RS,LC,LA,LG
// RC,RA,RG,LS
// RC,RA,RG,LC
// RC,RA,RG,LA
// RC,RA,RG,LG
// RC,RA,LS,LC
// RC,RA,LS,LA
// RC,RA,LS,LG
// RC,RA,LC,LA
// RC,RA,LC,LG
// RC,RA,LA,LG
// RC,RG,LS,LC
// RC,RG,LS,LA
// RC,RG,LS,LG
// RC,RG,LC,LA
// RC,RG,LC,LG
// RC,RG,LA,LG
// RC,LS,LC,LA
// RC,LS,LC,LG
// RC,LS,LA,LG
// RC,LC,LA,LG
// RA,RG,LS,LC
// RA,RG,LS,LA
// RA,RG,LS,LG
// RA,RG,LC,LA
// RA,RG,LC,LG
// RA,RG,LA,LG
// RA,LS,LC,LA
// RA,LS,LC,LG
// RA,LS,LA,LG
// RA,LC,LA,LG
// RG,LS,LC,LA
// RG,LS,LC,LG
// RG,LS,LA,LG
// RG,LC,LA,LG