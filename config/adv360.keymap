
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

//#define AS_PIPE(keycode) &as N1 PLUS 
// #define AS_N1(keycode) &as N1 PLUS
// #define AS_N2(keycode) &as N2 LEFT_BRACKET 
// #define AS_N3(keycode) &as N3 LEFT_BRACE 
// #define AS_N4(keycode) &as N4 LEFT_PARENTHESIS
// #define AS_N5(keycode) &as N5 AMPS 
// #define AS_N6(keycode) &as N6 EQUAL 
// #define AS_N7(keycode) &as N7 RIGHT_PARENTHESIS 
// #define AS_N8(keycode) &as N8 RIGHT_BRACE 
// #define AS_N9(keycode) &as N9 RIGHT_BRACKET 
// #define AS_N0(keycode) &as N0 STAR 
// #define AS_EXL(keycode) &as PRCNT EXCL 

// #define HYP(key) LS(LC(LA(LG(key))))
#define HYPERKEY(key) LS(LC(LA(LG(key))))
#define HYP(key) LS(LC(LA(key)))
#define MEH LS(LA(LCTRL))
#define HYPER    LS(LC(LA(LGUI)))

#define BROWSER_SEARCH LG(F) 
#define BROWSER_NEWTAB LG(T) 
#define BROWSER_CLOSETTAB LG(W) 
#define BROWSER_NEXTTAB LG(LA(RIGHT))
#define BROWSER_PREVTAB LG(LA(LEFT))

&mt {
    tapping-term-ms = <210>;
    flavor = "tap-preferred";
    quick_tap_ms = <210>;
};

&lt {
    quick_tap_ms = <210>;
};

//   &sk {
//     release-after-ms = <350>;
//     quick-release;
//     /delete-property/ ignore-modifiers;
// };

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <230>;
        quick_tap_ms = <250>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    gpipe: grave_pipe {
    compatible = "zmk,behavior-mod-morph";
    label = "grave_pipe";
    #binding-cells = <0>;
    bindings = <&kp GRAVE>, <&kp PIPE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
ppipe: pipe_pipe {
    compatible = "zmk,behavior-mod-morph";
    label = "pipe_pipe";
    #binding-cells = <0>;
    bindings = <&kp PIPE>, <&kp PIPE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
pkp_n1: plus_kp_n1 {
    compatible = "zmk,behavior-mod-morph";
    label = "plus_kp_n1";
    #binding-cells = <0>;
    bindings = <&kp PLUS>, <&kp N1>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
lkp_n2: left_bracket_kp_n2 {
    compatible = "zmk,behavior-mod-morph";
    label = "left_bracket_kp_n2";
    #binding-cells = <0>;
    bindings = <&kp LEFT_BRACKET>, <&kp N2>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
lkp_n3: left_brace_kp_n3 {
    compatible = "zmk,behavior-mod-morph";
    label = "left_brace_kp_n3";
    #binding-cells = <0>;
    bindings = <&kp LEFT_BRACE>, <&kp N3>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
lkp_n4: left_parenthesis_kp_n4 {
    compatible = "zmk,behavior-mod-morph";
    label = "left_parenthesis_kp_n4";
    #binding-cells = <0>;
    bindings = <&kp LEFT_PARENTHESIS>, <&kp N4>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
akp_n5: amps_kp_n5 {
    compatible = "zmk,behavior-mod-morph";
    label = "amps_kp_n5";
    #binding-cells = <0>;
    bindings = <&kp AMPS>, <&kp N5>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
ekp_n6: equal_kp_n6 {
    compatible = "zmk,behavior-mod-morph";
    label = "equal_kp_n6";
    #binding-cells = <0>;
    bindings = <&kp EQUAL>, <&kp N6>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
rkp_n7: right_parenthesis_kp_n7 {
    compatible = "zmk,behavior-mod-morph";
    label = "right_parenthesis_kp_n7";
    #binding-cells = <0>;
    bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
rkp_n8: right_brace_kp_n8 {
    compatible = "zmk,behavior-mod-morph";
    label = "right_brace_kp_n8";
    #binding-cells = <0>;
    bindings = <&kp RIGHT_BRACE>, <&kp N8>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
rkp_n9: right_bracket_kp_n9 {
    compatible = "zmk,behavior-mod-morph";
    label = "right_bracket_kp_n9";
    #binding-cells = <0>;
    bindings = <&kp RIGHT_BRACKET>, <&kp N9>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
skp_n0: star_kp_n0 {
    compatible = "zmk,behavior-mod-morph";
    label = "star_kp_n0";
    #binding-cells = <0>;
    bindings = <&kp STAR>, <&kp N0>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
eprcnt: excl_prcnt {
    compatible = "zmk,behavior-mod-morph";
    label = "excl_prcnt";
    #binding-cells = <0>;
    bindings = <&kp EXCL>, <&kp PRCNT>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};

dtilde: dllr_tilde {
    compatible = "zmk,behavior-mod-morph";
    label = "dllr_grave";
    #binding-cells = <0>;
    bindings = <&kp DLLR>, <&kp TILDE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
ggrave: grave_grave {
    compatible = "zmk,behavior-mod-morph";
    label = "grave_grave";
    #binding-cells = <0>;
    bindings = <&kp GRAVE>, <&kp GRAVE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
bhash: bslh_hash {
    compatible = "zmk,behavior-mod-morph";
    label = "bslh_hash";
    #binding-cells = <0>;
    bindings = <&kp BSLH>, <&kp HASH>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
acaret: at_caret {
    compatible = "zmk,behavior-mod-morph";
    label = "at_caret";
    #binding-cells = <0>;
    bindings = <&kp AT>, <&kp CARET>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};
td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp CAPSLOCK>;
        };
                as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht_bhash: ht_bhash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BHASH";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&bhash>;
        };
  };




    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
                &kp EQUAL       &kp N1      &kp N2   &kp N3    &kp N4     &kp N5               &tog 1      &mo 3     &kp N6     &kp N7     &kp N8     &kp N9     &kp N0  &kp MINUS
                &kp TAB         &kp Q       &kp W    &kp E     &kp R      &kp T                &tog 5      &none      &kp Y      &kp U      &kp I      &kp O      &kp P   &kp BSLH
                &mt LCTRL ESC   &kp A       &kp S    &kp D     &kp F      &kp G                &none  &mt LCTRL HYP(SPACE)   &kp LALT                         &kp LGUI  &mt RCTRL HYP(SPACE)      &none     &kp H   &kp J      &kp K    &kp L  &kp SEMI    &kp SQT
                &kp LSHFT      &kp Z       &kp X    &kp C     &kp V      &kp B     &none      &none   &kp HOME      &none      &none  &kp PG_UP      &none      &none     &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                &mo 2           &kp GRAVE   &mo 4    &kp LEFT  &kp RIGHT            &kp BACKSPACE            &lt 6 ESC    &mo 7  &mo 7  &kp ENTER  &lt 7 SPACE   &kp DOWN     &kp UP   &kp LBKT  &kp RBKT   &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5             &trans      &mo 3     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T              &none      &none      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F     &kp G              &none  &kp LCTRL   &kp LALT                                 &kp C_VOLUME_DOWN        &kp C_VOLUME_UP       &none     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V     &kp B              &none      &none   &kp HOME       &none         &none      &kp C_PLAY_PAUSE            &none       &none     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT  &kp BSPC            &kp DEL    &kp END  &kp C_MUTE   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN  &kp KP_DOT  &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
       &kp F1           &kp F2         &kp F3         &kp F4          &kp F5  &kp F6            &tog 1   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
       &trans           &trans         &trans         &trans          &trans  &trans             &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
       &trans  &macro_brackets  &macro_braces  &macro_parens  &macro_dquotes  &trans             &none  &trans  &trans                   &kp F19   &kp F24    &none  &kp F19   &kp F24  &trans  &trans  &trans  &trans
       &trans           &trans         &trans         &trans          &trans  &trans             &none   &none  &trans   &none   &none   &trans    &none    &none  &trans  &trans  &trans  &trans  &trans  &trans
       &trans           &trans         &trans         &trans          &trans  &trans            &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans
            >;
        };

        layer_mod {
            bindings = <
      &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                            &tog 4       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
      &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
      &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
      &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
      &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

        layer_gaming {
            bindings = <
       &trans    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4      &none            &tog 4  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans         &kp TAB         &kp Q         &kp W         &kp E      &kp R             &kp T  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans         &kp ESC         &kp A         &kp S         &kp D      &kp F             &kp G  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp LEFT_SHIFT         &kp Z         &kp X         &kp C      &kp V            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans       &kp LCTRL        &trans        &trans        &trans  &kp SPACE            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

       prime_layer {
      bindings = <
        &ppipe    &pkp_n1     &lkp_n2   &lkp_n3  &lkp_n4    &akp_n5        &tog 4                                                     &mo 3           &ekp_n6  &rkp_n7  &rkp_n8   &rkp_n9   &skp_n0  &eprcnt
        &mt MEH TAB   &kp SEMI    &kp COMMA &lt 12 DOT  &lt 12 P      &kp Y   &tog 5                                                     &macro_kinesis &kp F    &kp G    &kp C     &kp R     &kp L    &ht_bhash  MEH 0
        &mt HYPER ESC   &hm LGUI A       &hm LALT O     &hm LSFT E    &hm LCTL U      &lt 9 I   &none    &mt LCTRL HYP(SPACE) &kp LALT                    &kp LGUI  &mt RCTRL HYP(SPACE)  &none &lt 8 D    &hm RCTRL  H  &hm RSHFT T     &hm LALT N     &hm RGUI S    &mt HYPER MINUS
        &kp LSHFT  &lt 12 APOS    &kp Q     &kp J    &kp K      &kp X         &none     &none     &mo 7 &none &none &kp PG_UP &none     &none  &kp B    &kp M    &kp W     &kp V     &kp Z    &kp RSHFT
        &mo 12     &dtilde     &gpipe  &kp LEFT &kp RIGHT                &lt 7 BKSP  &lt 6 ESC   &caps_word             &mo 7 &lt 7  ENTER &lt 7 SPACE       &kp DOWN   &kp UP  &kp FSLH  &acaret  &mo 12
        >;
    };

        layer_qwerty_nav {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans  &kp HYPERKEY(LEFT)  &kp HYPERKEY(RIGHT)  &kp LC(LS(A))  &trans  &trans
       &trans  &trans  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE   &kp C_VOLUME_UP   &kp C_MUTE            &trans  &trans  &trans                                                  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans        &trans           &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };

         symbols_layer {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                                       &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &macro_equal_space   &kp AT     &kp UNDER    &kp LBKT    &kp RBKT      &kp CARET  &none                                                                        &none &kp EXCL  &kp LT  &kp GT     &kp EQUAL    &kp AMPS    &kp BSLH
        &macro_const   &kp BSLH     &kp FSLH    &kp LBRC    &kp RBRC      &kp ASTRK  &none           &kp LCTRL &kp LALT             &kp LGUI  &kp RCTRL           &none &kp QMARK  &kp LPAR  &kp RPAR     &kp MINUS    &kp COLON &macro_parenth_equal_great
        &trans &kp POUND     &kp DLLR    &kp PIPE    &kp TILDE      &kp GRAVE         &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp PLUS  &kp PRCNT  &kp DOUBLE_QUOTES &kp SINGLE_QUOTE  &kp SEMICOLON &kp RSHFT
        &macro_delete_whole_line     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END              &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
      >;
    };   

      deleting_layer {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans &macro_delete_whole_line &macro_delete_till_start_line &macro_delete_till_end_line  &trans  &trans            &trans                                                                  &trans  &trans  &kp HYPERKEY(LEFT)  &kp HYPERKEY(RIGHT)  &kp LC(LS(A))  &trans  &trans
       &trans  &kp LC(BKSP) &kp BKSP &kp DEL &kp LC(DEL)  &trans &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)   &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans        &trans           &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
  jump_words_layer {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans   &kp LC(LEFT) &kp HOME              &kp END &kp LC(RIGHT)  &trans &trans
       &trans  &trans  &lt 11 O &lt 10 E &trans    &trans            &trans  &trans  &trans                                                  &trans  &trans  &trans                     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT     &kp ENTER  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &kp LC(Z)          &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
deleting_layer_on_right {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans   &macro_delete_whole_line &macro_delete_till_start_line              &macro_delete_till_end_line &trans  &trans &trans
       &trans  &trans  &lt 11 O  &lt 10 E  &trans  &trans            &trans  &trans  &trans                                              &trans  &trans  &trans                     &kp LC(BKSP) &kp BKSP &kp DEL &kp LC(DEL)     &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &kp LC(Z)          &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };
        selecting_layer_on_right_11 {
            bindings = <
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans  &trans     &kp LC(LS(TAB))          &kp LC(TAB)         &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                                 &trans   &macro_select_whole_line &kp LS(HOME)  &kp LS(END) &trans  &trans &trans
       &trans  &trans  &lt 11 O  &lt 10 E  &trans  &trans            &trans  &trans  &trans                                              &trans  &trans  &trans                &kp LS(LEFT)     &kp LS(LC(LEFT))   &kp LS(LC(RIGHT)) &kp LS(RIGHT)    &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &kp LC(Z)          &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)  &trans
       &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans              &trans               &trans         &trans  &trans  &trans          &trans          &trans
            >;
        };

                layer_fn_12 {
            bindings = <
       &kp F1           &kp F2         &kp F3         &kp F4          &kp F5  &kp F6            &tog 1                                  &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
       &trans           &trans         &trans         &trans          &trans  &trans             &none                                   &none  &kp KP_ENTER  &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_N0   &trans
       &trans  &macro_brackets  &macro_braces  &macro_parens  &macro_dquotes  &trans             &none  &trans  &trans                   &kp F19   &kp F24    &none  &kp DOT   &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS   &trans
       &trans           &trans         &trans         &trans          &trans  &trans             &none   &none  &trans   &none   &none   &trans    &none    &none   &kp COMMA  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_PLUS  &trans
       &trans           &trans         &trans         &trans          &trans  &trans            &trans  &trans  &trans  &trans  &trans   &kp KP_NUM  &kp EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
            >;
        };

    };
};


// &ppipe    AS_N1(N1)    AS_N2(N2)    AS_N3(N3)     AS_N4(N4)    AS_N5(N5)        &tog 4                                                     &mo 3           AS_N6(N6)     AS_N7(N7)     AS_N8(N8)     AS_N9(N9)    AS_N0(N0)  AS_EXL(EXCL)